#!/bin/sh
#
# hook:help Main help handler
#

hook_version="2"
hook_root="hook_command_help_050"

# description method
hook_command_help_050_description()
{
  echo "hook->help: Main help handler"
}

# help method
hook_command_help_050_help()
{
  echo "
hook->help: Main help handler

This hook is the primary COMMAND help executor.  It will
write generic help to the screen, or it will load and
write command specific, and command and hook specific
help to the screen.

To get generic help try running wihtout a command.
"
}
# description method
hook_command_help_050_execute()
{

  # help functions have some flags
  local hook=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -t|--topic)
        topic=$2
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  # Command is the first argument
  COMMAND=$1
  shift

  debug --level 6 --topic "HOOK>COMMAND->HELP->050" "including command \"${COMMAND}\""

  _include_command ${COMMAND}
  local success=$?

  if [ $success -gt 0 ]; then

    debug --level 6 --topic "HOOK>COMMAND->HELP->050" "command not found \"${COMMAND}\""

    if [ "${COMMAND}" != "" ]; then
      hook_command_help_050_help_unknowncommand ${COMMAND} $@
    fi

    hook_command_help_050_help_generalhelp $@
  else

    hook_command_help_050_help_commandhelp ${COMMAND} $@

    local subtopic=${topic#*:}
    topic=${topic/:${subtopic}/}

    case "${topic}" in
      "hook")
	# subtopic is a hook
	local hook="${subtopic}"
	local helpfound="no"

	# do a list of all of the hooks
	local label=""
	local states="pre execute post help"
	for state in $states; do
	  label="${state}"
	  if [ "$state" == "execute" ]; then
	    # execute is a placeholder for no state
	    state=""
	  else
	    state="--state ${state}"
	  fi
	  local hooks="`hooks_list "command/${COMMAND}" ${state}`"

	  if [ "$hooks" != "" ]; then
	    for thishook in ${hooks}; do
	      local hooklabel="`hook_label ${thishook}`"
	      if [ "${hook}" == "${hooklabel}" ]; then
	        helpfound="yes"
		if [ "${label}" == "help" ]; then
		  hook_command_help_050_help_hookhelpforbidden $hook $thishook
		else
		  hook_command_help_050_help_hookhelp $hook $thishook
		fi
		exit
	      fi
	    done
	  fi
	done

	if [ "${helpfound}" == "no" ]; then
	  hook_command_help_050_help_unknownhook ${FLOW} ${hook} $@
	fi

      ;;
      *)

	debug --level 6 --topic "HOOK>COMMAND->HELP->050" "no help hook specified.  List all hooks instead."

	# do a list of all of the hooks
	local label=""
	local states="pre execute post help"
	for state in $states; do
	  label="${state}"
	  if [ "$state" == "execute" ]; then
	    # execute is a placeholder for no state
	    state=""
	  else
	    state="--state ${state}"
	  fi
	  local hooks="`hooks_list "command/${COMMAND}" ${state}`"

	  if [ "$hooks" != "" ]; then
	    hook_command_help_050_help_hooklist ${COMMAND} "${label}" "${hooks}"
	  fi
	done

    esac

  fi
}

# generic help message for the command help system
# @TODO put some usefull material here
hook_command_help_050_help_generalhelp()
{
  echo "
hook->command/help 050 : GENERIC HELP MESSAGE GOES HERE
"
}
# output message if help is requested for an unknow command
hook_command_help_050_help_unknowncommand()
{
  echo "
hook->command/help 050 : UNKNOWN COMMAND HELP MESSAGE GOES HERE [command:$1]
"
}
# output message if help was requested for an unkown hook
hook_command_help_050_help_unknownhook()
{
  echo "
hook->command/help 050 : UNKNOWN COMMAND HOOK HELP MESSAGE GOES HERE [command:$1][hook:$2]
"
}

# output help for a specific command
hook_command_help_050_help_commandhelp()
{
  local COMMAND=$1
  shift

  debug --level 6 --topic "HOOK>COMMAND->HELP->050" "handing off help to command help hook [command:\"${COMMAND}\"]"
  command_execute ${COMMAND} --action "help" $@
}
# output a list (of hooks) for a state
hook_command_help_050_help_hooklist()
{
  debug --level 7 --topic "HOOK>COMMAND->HELP->050" "Executing hook list for command [command:$1][state:$2][hooks:$3]"

  local flow="$1"
  local state="$2"
  local hooks="$3"

  echo "
ACTIVE HOOKS FOR STATE: ${state}
=============================================="
  shift

  for hook in ${hooks}; do
    local label="$(hook_label ${hook} $@)"
    local description="$(hook_description ${hook} $@)"
    echo "  -->${label} : ${description}"
  done
}
# output the hook _help contents
hook_command_help_050_help_hookhelp()
{
  local label=$1
  local hook=$2
  shift 2

  echo "
HOOK HELP FOR: $label
=======================================================
"
  hook_help ${hook} $@
}
# in some cases it doesn't make sense to output hook help
# such as when it is this hook
hook_command_help_050_help_hookhelpforbidden()
{
  local label=$1
  local hook=$2
  shift 2

  echo "
HOOK HELP:
==========
can't give hook help for: $label.  This hook is a part of the above message.
"

}

