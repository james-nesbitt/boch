#!/bin/sh
#
# Apply some default settings, if you are using the wwwserver library
#

hook_version=2
hook_root="wwwserver_settings_defaults_030"

# description method
wwwserver_settings_defaults_030_description()
{
  echo "Default settings for the wwwserver-cnpm library and builds"
}

# help method
wwwserver_settings_defaults_030_help()
{
  echo "
LIBRARY->WWWSERVERCNPM->HOOKS->SETTINGS->DEFAULT->030 Add default settings from the wwwservercnpm library

- explain the library

- explain the library_load call

- explain settings for wwwserver-cnpm builds
  - explain when you need to use the required_builds (or why you might want to)
  - explain the developer user
  - explain ssh settings
  - explain the mount
"
}

# execute method
wwwserver_settings_defaults_030_execute()
{

  project_buildtemplate="${project_buildtemplate:-template}"

  echo "#
# Use the distributed wwwservercnpm builds and functionality
#
# Using this library assumes that you are using one of the www
# server builds as a parent, and so these settings are added
# to take advantage of that.
#
# most likely your project was initialized with the --wwwserver flag
#

##
# Load the wwwserver library
#
library_load \"wwwservercnpm\"

###
# Docker image configurations
#
# @NOTE many of these settings overload above settings with new
#   values that work when using builds from the wwwserver library
#   You should choose values that work for you, either keeping
#   these new values or removing them and using the classic values
#

# Project build images
#
# Uncomment this line if you need the wwwserver-cnpm images built
# before any custom project images are built.  Another option would
# be to use the docker hosted equivalent as image parents
#
#required_builds=\"${required_builds:-"wwwserver-cnpm wwwserver-cnpm-dev"}\"

# Base template from which to make new project builds
# @NOTE this is not often used, mainly it is only used during the init flow
project_buildtemplate=\"${project_buildtemplate}\"

###
# Docker Container configurations
#

# User used inside the containers, for shell and ssh
machine_username=\"developer\"

# OS hostname used inside the container (which would impact things like avahi)
machine_hostname=\"\${project_name}\"

# Machine arguments for regular container runs.  These arguments are added to all runs (except shell runs)
# @NOTE these are arguments for \"docker run\". Check the docker command to learn more
machine_runargs=\"--tty\" # --tty is needed for supervisord to run.

###
# Prefered shell configuration for the Machine
#
# @NOTE Running a shell creates a new container, but does not give access to an existing container
#
# @NOTE if you are using our builds, then zsh is available
machine_shell=\"/bin/zsh\"
# arguments for docker run that should always be included when starting a shell: docker help run
# @NOTE you should probably take a look at docker run to learn more
# @NOTE our builds have a developer user created, and a home directory created
machine_shellrunargs=\"--publish-all=true --env HOME=/home/\${machine_username} --user=\${machine_username}\"

###
# Mount list:
#
# These are run time mounts, where the host FS can be changed
# directly changing the container FS.
#

# Source mount : wwwserver builds use /app/source for the project source (and likely expect /app/source/www for webroot
settings_mount_addmount \"\${path_project}/source:/app/source\"

# SSH
# This lets your container user do ssh like the host user (selinux may block this on the host)
settings_mount_addmount \"\${path_userhome}/.ssh:/home/\${machine_username}/.ssh-host\"
# This may let you ssh into the container without a password, if you have an rsa key
#settings_mount_addmount \"\${path_userhome}/.ssh/id_rsa.pub:/home/\${machine_username}/.ssh/authorized_keys\"
"
}
