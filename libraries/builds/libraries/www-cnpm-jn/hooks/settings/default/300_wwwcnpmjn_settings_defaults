#!/bin/sh
#
# Apply some default settings, if you are using the wwwserver library
#

hook_version=2
hook_root="wwwcnpmjn_settings_defaults_300"

# description method
wwwcnpmjn_settings_defaults_300_description()
{
  echo "Default settings for the www-cnpm-jn library and builds"
}

# help method
wwwcnpmjn_settings_defaults_300_help()
{
  echo "Add default settings from the www-cnpm-jn library

This hook adds default settings that integration with the www server library.
The purpose here is to give access to the library builds, and related settings

- explain settings for www-cnpm-jn builds
  - The library includes a template build called \"template\"
  - these builds use a user called \"developer\"
  - included are some ssh specific settings
  - included are the following mounts:
      -  mount the project source folder to /app/source
      -  mount the host user .ssh folder to /home/developer/.ssh-host
"
}

# execute method
wwwcnpmjn_settings_defaults_300_execute()
{
  project_buildtemplate="${project_buildtemplate:-www-cnpm-jn-template}"

  echo "#
# Use the distributed www-cnpm-jn builds and functionality
#
# Using this library assumes that you are using one of the www
# server builds as a parent, and so these settings are added
# to take advantage of the provided functionality.
#
# most likely your project was initialized with the --www-cnpm-jn
# flag or the --libraries \"www-cnpm-jn\" flag
#

###
# Load the www-cnpm-jn library
#
# @NOTE that the library doesn't really do much after the init process
#    so in general it isn't really necessary to load it during normal
#    operations.  If you are rebuilding the parent images a lot then
#    you might need access to the library, so uncomment this line.
#
# @NOTE You can load this library at runtime using $/> boch %builds:www-cnpm-jn
#alias_add \"%builds:www-cnpm-jn\"

###
# Docker image configurations
#
# @NOTE many of these settings overload above settings with new
#   values that work when using builds from the www server library
#   You should choose values that work for you, either keeping
#   these new values or removing them and using the classic values
#

# Project build images
#
# Uncomment this line if you need the www-cnpm-jn images built locally
# before any custom project images are built.  A common alternative
# is to use the docker hosted equivalent as image parents, so docker
# only needs to pull that image, instead of building it.
#
#required_builds=\"${required_builds:-"www-cnpm-jn www-cnpm-jn-dev"}\"

###
# Docker Container configurations
#

# User used inside the containers, for shell and ssh
machine_username=\"developer\"

# OS hostname used inside the container (which would impact things like avahi)
machine_hostname=\"\${project_name}\"

# Machine arguments for regular container runs.  These arguments are added to all runs (except shell runs)
# @NOTE these are arguments for \"docker run\". Check the docker command to learn more
machine_runargs=\"--tty\" # --tty is needed for supervisord to run.

###
# Prefered shell configuration for the Machine
#
# @NOTE Running a shell creates a new container, but does not give access to an existing container
#
# @NOTE if you are using our builds, then zsh is available
machine_shell=\"/bin/zsh\"
# arguments for docker run that should always be included when starting a shell: docker help run
# @NOTE you should probably take a look at docker run to learn more
# @NOTE our builds have a developer user created, and a home directory created
machine_sandboxrunargs=\"--publish-all=true --env HOME=/home/\${machine_username} --user=\${machine_username}\"

###
# Environment Variables
#
# With these actions you can preset system environment variables to pass
# Information from otside the container.
# This is usefull for passing in things like passwords and usernames, to
# override image settings.
#settings_env_set \"SSH_PASSWORD=PASSWORD\"

###
# Mount list:
#
# These are run time mounts, where the host FS can be changed
# directly changing the container FS.
#
# @NOTE Path aliases:
#   -  root~ : the root path of the project
#   -  project~ : the path the project's .boch folder
#   -  home~ : the users home folder
#   -  user~ : the path the user's home .boch folder
#

# Source mount : www server builds use /app/source for the project source (and likely expect /app/source/www for webroot)
settings_mount_addmount \"root~/source:/app/source\"

# SSH
# This lets your container user do ssh like the host user (selinux may block this on the host)
settings_mount_addmount \"home~.ssh:/home/\${machine_username}/.ssh-host\"
# This may let you ssh into the container without a password, if you have an rsa key
# @NOTE If you don't use this then you should make sure that you add your key to the template build dot_ssh folder
#settings_mount_addmount \"\home~/.ssh/id_rsa.pub:/home/\${machine_username}/.ssh/authorized_keys\"
"
}
