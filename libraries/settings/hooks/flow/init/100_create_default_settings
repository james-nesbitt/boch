#!/bin/sh
#
# INIT:HOOK: Create the custom settings file
#

hook_version=2
hook_root="hook_init_100"

# descriptoin method
hook_init_100_description()
{
  echo "Populate the default customs settings file, Create it if missing"
}

# help method
hook_init_100_help()
{
  echo "hook->init 100 Populate the default customs settings.sh, Create it if missing

This hook does two things:
1. Makes sure that a custom settings file exists
2. Populates the settings file with the contents of any hook->settings->default
   hook that has not been added already.

@NOTE this hook leaves little messages in the settings file to indicate that it
  has added conents.  If you remove those messages, then the hook will think that
  they were never added, and remove them.
"
  hook_settings_default_100_help_hooklist "default" "`hooks_list --state \"default\" \"settings\"`"
}

# execute method
hook_init_100_execute()
{

  # path to this management system
  local path="${path_customsettings:-"${path_projectconf}/settings"}"

  debug --level 5 --topic "HOOK->COMMAND->INIT->100" "Populating default settings file [${path}]"

  if ! path_is --file "${path}"; then

    debug --level 6 --topic "HOOK->COMMAND->INIT->100" "Creating missing default custom settings file [${path}]"

    path_ensure --exec "${path}"


    echo "#!/bin/sh
#
# Overrideable configuration variables for your project
#

#
# @NOTE this file is constructed by various hooks run in sequence.  You may notice the same variables
#   occuring multiple times across the files, from different sources. The last occurence takes precendence.
#   If you want, remove any occurence of variables, and the settings won't be touched.
# @NOTE if you remove the line which tells you which settings source the settings came from, then the default
#   settings will be added again.

" > ${path}

    chmod ug+rwx ${path}

  else
    debug --level 6 --topic "HOOK->COMMAND->INIT->100" "Default custom settings file already exists [${path}]"
  fi

  local hook=""
  for hook in `hooks_list --state "default" "settings" --file "${path}"`; do

    hook_version=""
    hook_root=""

    hook_include ${hook} $@

    if [ "`egrep \"${hook_root}\" ${path}`" == "" ]; then

      echo "
## SETTINGS FROM HOOK : ${hook_root} [leave this line to prevent this hook from adding these settings again]
" >> ${path}
      #echo "`hook_execute ${hook}`" >> ${path}
      echo "`"${hook_root}_execute"`" >> ${path}

      debug --level 6 --topic "HOOK->COMMAND->INIT->100" "A hook provided default settings [hook_version:${hook_version}][hook_root:${hook_root}][hook:${hook}]"
    else
      debug --level 6 --topic "HOOK->COMMAND->INIT->100" "A hook provided default settings, but it is already included in the settings file [hook_version:${hook_version}][hook_root:${hook_root}][hook:${hook}]"
    fi

  done

}

# output a list (of hooks) for a state
hook_settings_default_100_help_hooklist()
{
  debug --level 7 --topic "HOOK->COMMAND->INIT->100" "Listing active default settings hooks"

  local state="$1"
  local hooks="$2"

  echo "
ACTIVE HOOKS: ${state}
=============================================="
  shift

  for hook in ${hooks}; do
    local label="$(hook_label ${hook} $@)"
    local description="$(hook_description ${hook} $@)"
    echo "  -->${label} : ${description}"
  done
}
