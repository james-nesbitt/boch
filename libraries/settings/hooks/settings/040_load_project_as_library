#!/bin/sh
#
# Configurable settings for the project
#

hook_version=2
hook_root="hook_settings_040"

# description method
hook_settings_040_description()
{
  echo "Load the custom project/data folder as a library"
}

# help method
hook_settings_040_help()
{
  echo "
hook->settings->040 : include a project as a library

This hooks attempts to load the custom data/project folder as a library,
to include any settings from the folder.
As a corrolary, any library load action is taken.

Currently there are library load hooks in the hooks library, the settings
library and the commands library, which will check for relevant folders
in the project.

"
  hook_settings_040_help_hooklist "pre" "`hooks_list \"library/load\" --state \"pre\"`"
  hook_settings_040_help_hooklist "default" "`hooks_list \"library/load\" `"
  hook_settings_040_help_hooklist "post" "`hooks_list \"library/load\" --state \"post\"`"
}


# execute method
hook_settings_040_execute()
{

  library_load --library "project" --path "${path_data}" --core "settings"

  if [ $success -gt 0 ]; then
    debug --level 3 --topic "HOOK->SETTINGS->040" "No custom data/project folder exists"
  else
    debug --level 8 --topic "HOOK->SETTINGS->040" "Loaded Data/Project folder as a library [path:$path]"
  fi

  # don't fail, even if we had problems.  This shouldn't break anything
  return 0
}

# print a help table list of hooks that act on the library load
hook_settings_040_help_hooklist()
{
  debug --level 7 --topic "HOOK->SETTINGS->040" "Listing active library load hooks"

  local state="$1"
  local hooks="$2"

  echo "
ACTIVE HOOKS: ${state}
=============================================="
  shift

  for hook in ${hooks}; do
    local label="$(hook_label ${hook} $@)"
    local description="$(hook_description ${hook} $@)"
    echo "  -->${label} : ${description}"
  done
}
