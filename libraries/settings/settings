#!/bin/sh
#
# Settings library
#

###
# Mount related functions
#
#

# Add a mount to the system (of the form host:container)
settings_mount_addmount()
{
  list_add "machine_mountvolumes" $1
}
# Clear out all mounts
settings_mount_clearmounts()
{
  list_reset "machine_mountvolumes"
}
# get a list of added mounts
settings_mount_getmounts()
{
  local format="list"
  local mounts="`list_get "machine_mountvolumes"`"

  local flags=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -f|--format)
        format="$2"
        shift
        ;;
      -m|--mount|--mounts)
        format="mount"
        ;;
      -s|--short)
        format="short"
        ;;
      *)
        break;
    esac
    shift
  done

  # $1 would allow for different formats
  case "${format}" in
    "mount")
      # allow hooks to alter the value
      mounts="`hooks_altervalue "mountvolumes" ${mounts}`"

      local mount=""
      local collect=""
      for mount in ${mounts}; do
        collect="${collect} --volume=`path_expand "${mount}"`"
      done
      echo "${collect}"
      ;;
    "short")
      local mount=""
      for mount in ${mounts}; do
        echo "`path_shorten \"${mount%:*}\"`:${mount#*:}"
      done
      ;;
    *)
      echo "${mounts}"
      ;;
  esac
}

####
# Container links management
#

# Add a container link
settings_link_add()
{
  list_add "settings_links" "${1}"
}
# Clear out all links
settings_link_clear()
{
  list_reset "settings_links"
}
# retrieve all container links
settings_link_get()
{
  local format="list"
  local links="`list_get "settings_links"`"

  local flags=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -f|--format)
        format="$2"
        shift
        ;;
      -l|--link|--links)
        format="link"
        ;;
      -s|--short)
        format="short"
        ;;
      *)
        break;
    esac
    shift
  done

  # $1 would allow for different formats
  case "${format}" in
    "link")
      # allow hooks to alter the value
      links="`hooks_altervalue "machinelinks" ${links}`"

      local link=""
      local collect=""
      for link in ${links}; do
        collect="${collect} --link=${link}"
      done
      echo "${collect}"
      ;;
    "short")
      local link=""
      for link in ${links}; do
        echo "`path_shorten \"${link%:*}\"`:${link#*:}"
      done
      ;;
    *)
      echo "${links}"
      ;;
  esac
}


####
# Container environment variable management
#

# Add a container env
settings_env_set()
{
  list_add "settings_envs" "${1}"
}
# Clear out all links
settings_env_clear()
{
  list_reset "settings_envs"
}
# retrieve all container links
settings_env_get()
{
  local format="list"
  local envs="`list_get "settings_envs"`"

  local flags=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -f|--format)
        format="$2"
        shift
        ;;
      -e|--export|--exportss)
        format="export"
        ;;
      -s|--short)
        format="short"
        ;;
      *)
        break;
    esac
    shift
  done

  # $1 would allow for different formats
  case "${format}" in
    "export")
      # allow hooks to alter the value
      envs="`hooks_altervalue "machineenvs" ${envs}`"

      local env=""
      local collect=""
      for env in ${envs}; do
        collect="${collect} --env=${env}"
      done
      echo "${collect}"
      ;;
    "short")
      local env=""
      for env in ${envs}; do
        echo "${env}"
      done
      ;;
    *)
      echo "${envs}"
      ;;
  esac
}

#
# This library doesn't do too much yet,
# other than run a lot of hooks
#

#############################
# include setting overrides #
#############################
#
# all of the usefull settings are made
# in settings hooks
#
settings_init()
{
  # Run settings initialization
  debug --level 7 --topic "SETTINGS" "Running settings hooks"

  # execute any existing settings hooks
  debug --level 8 --topic "SETTINGS" "Running settings pre hooks => hooks_execute settings --state pre"
  hooks_execute settings --state "pre" $@
  debug --level 8 --topic "SETTINGS" "Running settings hooks => hooks_execute settings"
  hooks_execute settings
  debug --level 8 --topic "SETTINGS" "Running settings post hooks => hooks_execute settings --state post"
  hooks_execute settings --state "post" $@
  debug --level 8 --topic "SETTINGS" "Finished running settings hooks"

  debug --level 7 --topic "SETTINGS" "Running settings hooks complete"
}

# Execute handler
settings_execute()
{

  if [ -z "${1}" ]; then
    # @NOTE I can't decide what the default behaviour should be
    # help_execute "settings:general"
    help_execute "settings:settings"
  else
    case "${1}" in
      settings|show|all)
        shift
        help_execute "settings:settings"
        ;;
      *)
        help_execute "settings:${1}"
    esac
  fi
}
