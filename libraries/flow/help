#!/bin/sh
#
# Help hander
#


# help method
flow_help()
{

  # flow is the first argument
  flow=$1
  shift

  if [ -z "${flow}" ]; then

    flow_help_generalhelp $@

    help_scope_add "flow"
    help_scope_list

  else

    if flow_exists "${flow}"; then

      flow_help_flowhelp "${flow}" $@

      help_scope_add "flow:${flow}"
      help_scope_list

    else

        debug --level 6 --topic "FLOW->HELP" "flow not found [flow:${flow}]"
        flow_help_unknownflow "${flow}" $@

    fi

  fi
}

# method to list all flow topics in scope
flow_helplist()
{
  local scope=""
  if [ -n "${1}" ]; then
    scope="flow/${1}"

    echo "HOOKS THAT OPERATE ON THE ${1} FLOW:
"
  else
    scope="flow"
  fi

  # list all hooks that act on this scope
  help_topic_list "hook:${scope}"
}

# generic help message for the command help system
# @TODO put some usefull material here
flow_help_generalhelp()
{
  echo "The Flow library help

Flows are a more advanced addition to the system tools.  They
are meant to be abstract workflows, that are more advanced than
single operations.
Where the control script is meant to hand off to single docker
commands, flows are meant to give higher level workflow possibilities
that mix many docker commands, and other commands together.

In implementation, a flow is conceptually 100% hook/event driven,
unlike something like a command.

To get more help on individual flows, see the list below:

"

  flow_help_flowlist

}
# output message if help is requested for an unknow command
flow_help_unknownflow()
{
  echo "Unknow flow : $1

The flow that you asked for help with, cannot be found in the system.

"
  # Include general help
  flow_help_generalhelp
}

# List all of the flows
flow_help_flowlist()
{
  local flow
  echo "
Known flows
==========="
  for flow in `flows_getflows`; do
    echo "--> ${flow} (flow:${flow})"
  done
}

# output help for a specific flow
flow_help_flowhelp()
{
  local flow=$1
  shift
  debug --level 6 --topic "FLOW->HELP" "handing off help to help hooks for flow -> hooks_execute \"flow/${flow}\" --state \"help\" $@"
  hooks_execute "flow/${flow}" --state "help" $@
}

