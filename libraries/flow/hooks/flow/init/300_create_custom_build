#!/bin/sh
#
# Create the project image build
#

hook_version=2
hook_root="hook_command_init_300"


# description method
hook_command_init_300_description()
{
  echo "Create default project image build"
}

# help method
hook_command_init_300_help()
{
  echo "HOOK->FLOW->INIT->300: Build the default project image

This hook will run a docker build, createing a new system
image for you to use for your project.

[-t|--template {template}] : specify an specific build that should be used as the new custom build
[-b|--build {build}] : specify an specific build that should be copied as the new custom build
[-i|--image {image}] : specify an image name for the new custom build
[-v|--version {version}] : specify an specific version/tag for the new custom build

"
}

# execute method
hook_command_init_300_execute()
{

  if [ -z "${project_buildtemplate}" ]; then
    debug --level 5 --topic "HOOK->FLOW->INIT->300" "Not creating a custom build for the project, as no template was specified."
  else

    local path_build="${path_projectconf}/builds/${project_build}"
    if [ -d "${path_projectconf}" ] && [ ! -d "${path_build}" ]; then

      library_load "command"
      command_load "build"

      local path_template="`build_find \"${project_buildtemplate}\"`"
      if path_is --dir "${path_template}"; then
        path_ensure --dir "${path_build%/*}"
        cp -R "${path_template}" "${path_build}"
        message "Created custom build for the project `path_shorten ${path_template}`->`path_shorten ${path_build}`"
        debug --level 5 --topic "HOOK->FLOW->INIT->300" "Created custom build [`path_shorten \"${path_template}\"` => `path_shorten \"${path_build}\"`]"
      else
        debug --level 6 --topic "HOOK->FLOW->INIT->300" "no matching custom build found [build:${project_build}][image:${project_image}][version:${project_imageversion}]"
      fi

    else

      debug --level 6 --topic "HOOK->FLOW->INIT->300" "Custom build found in project folder [build:${project_build}][image:${project_image}][version:${project_imageversion}]"
      return 0

    fi

  fi
}

libraries_contents2()
{
  local subpath=""
  local type="exec"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -d|--dir|--directory)
        type="dir"
        ;;
      -f|--file)
        type="file"
        ;;
      -l|--library)
        type="library"
        ;;
      -x|--executable)
        type="exec"
        ;;
      -s|--subpath)
        subpath="/${2}"
        shift
        ;;
      -t|--type)
        type="${2}"
        shift
        ;;
      *)
        break;
    esac
    shift
  done

  local library=""
  for library in `libraries_list`; do
    path_contents --type "${type}" "`library_path \"${library}\"`${subpath}"
  done
}
