#!/bin/sh
#
# HOOK->FLOW->INIT->HELP->500 General help for the "init" flow
#

hook_version=2
hook_root="hook_flow_init_help_500"

# description method
hook_flow_init_help_500_description()
{
  echo "General help text for the init flow"
}

# help method
hook_flow_init_help_500_help()
{
  echo "
HOOK->FLOW->INIT->HELP->500 General help for the "init" flow

This hook gives general help text for the init flow

"
}

# execute method
hook_flow_init_help_500_execute()
{
  echo "FLOW: INIT

The init flow is flow designed to initialize a project root
to prepare it for use with the command tools, and further flows

The hooks for init should be safe to repeat the action.  The changes
made in each hook should be non-destructive where possible.

Usage:

  $/> ./flow init <options>

Options: (in general these are converted to global vars in the first hook)

  [-w|--buildnow] : instruct the init system to run docker build during init
    as it is needed.
  [-r|--required \"{builds}\"] : specify specific local builds that are dependencies
    for the project and need to be built during initialization
    (notice that without --buildnow this does nothing)

  [-n|--name {name}] : specify a project name.  This name is used for default values
    for other things, such as default image name, default hostname etc.

  [-t|--template {template}] : specify an specific build that should be used as the new custom build
  [-b|--build {build}] : specify an specific build that should be used as the new custom build
  [-i|--image {image}] : specify an image name for a new custom build
  [-v|--version {version}] : specify an specific version/tag for the a custom build

  [-h|--hostname {hostname}] : specify default machine hostnames for containers in this project

  [-s|--wwwserver] : include the wwwserver as a dependency; this will allow
    that library to affect the project through default dependencies.

The flow is of course entirely hook based, but some standard
parts of the flow are about making sure that there is a custom
folder for the project, some custom settings, and other project
resources.

Typical workflow for using this flow, is to run it once to get a project
folder, and then run it again after making changes to the settings in the
project folder.

@NOTE I suggest that you run the command like this:
  1. Give yourself a project folder like this:
       $/> ./flow init --name {a_project_name} --wwwserver
  2. Then make changes to /project/settings, /project/builds/{name}/Dockerfile, and add your
     pub key to /project/builds/{name}/dev_dotssh/authorized_keys
  3. Then then run the flow again like this:
       $/> ./flow init --buildnow
"
}
