#!/bin/sh
#
# hook:help Main help handler
#

hook_version="2"
hook_root="hook_flow_help_050"

# description method
hook_flow_help_050_description()
{
  echo "Main help handler for the ./flow tool"
}

# help method
hook_flow_help_050_help()
{
  echo "
hook->help: Main help handler

"
}
# description method
hook_flow_help_050_execute()
{

  # help functions have some flags
  local hook=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -t|--topic)
        topic=$2
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  # Command is the first argument
  FLOW=$1
  shift

  debug --level 6 --topic "HOOK>FLOW->HELP->050" "showing help for flow \"${FLOW}\""

  if [ "${FLOW}" == "" ]; then

    # debug --level 6 --topic "HOOK>FLOW->HELP->050" "flow not found \"${FLOW}\""
    hook_flow_help_050_help_generalhelp $@
    hook_flow_help_050_help_listflows $@

  else

    hook_flow_help_050_help_flowhelp ${FLOW} $@

    local subtopic=${topic#*:}
    topic=${topic/:${subtopic}/}

    case "${topic}" in

      # help for a specific hook
      "hook")
        # subtopic is a hook
        local hook="${subtopic}"
        local helpfound="no"

        # do a list of all of the hooks, so we can try to match the subtopic
        local label=""
        local states="pre execute post help"
        for state in $states; do
          label="${state}"
          if [ "$state" == "execute" ]; then
            # execute is a placeholder for no state
            state=""
          else
            state="--state ${state}"
          fi
          local hooks="`hooks_list "flow/${FLOW}" ${state}`"

          if [ "$hooks" != "" ]; then
            for thishook in ${hooks}; do
              local hooklabel="`hook_label ${thishook}`"
              if [ "${hook}" == "${hooklabel}" ]; then
                helpfound="yes"
            if [ "${label}" == "help" ]; then
              hook_flow_help_050_help_hookhelpforbidden $hook $thishook
            else
              hook_flow_help_050_help_hookhelp $hook $thishook
            fi
            exit
              fi
            done
          fi
        done

        if [ "${helpfound}" == "no" ]; then
          hook_flow_help_050_help_unknownhook ${FLOW} ${hook} $@
        fi

      ;;

      # generic help request
      *)
        debug --level 6 --topic "HOOK>FLOW->HELP->050" "no help hook specified.  List all hooks instead."

        # do a list of all of the hooks
        local label=""
        local states="pre execute post help"
        for state in $states; do
          label="${state}"
          if [ "$state" == "execute" ]; then
            # execute is a placeholder for no state
            state=""
          else
            state="--state ${state}"
          fi
          local hooks="`hooks_list "flow/${FLOW}" ${state}`"

          if [ "$hooks" != "" ]; then
            hook_flow_help_050_help_hooklist ${FLOW} "${label}" "${hooks}"
          fi
        done

      ;;
    esac

  fi
}

hook_flow_help_050_help_generalhelp()
{
  echo "
hook->flow/help 050 : GENERIC HELP MESSAGE GOES HERE

FLOW: HELP

GENERAL INSTRUCTION ON HOW TO USE FLOW

- explain the idea behind flow
- explain that flow is entirely hook based
  - explain why the system can't respond to an unknown flow
- show how to get a list of hooks used in a flow

- give examples for showing help for a flow      -> ./flow --help {flow}
- give examples for showing help for a flow hook -> ./flow --help hook:{hook} {flow}

"
}
# list all of the flows in the system
hook_flow_help_050_help_listflows()
{
  local flow=""
  echo "List all flows found in the system:"
  for flow in `flows_getflows`; do
    echo "-->${flow}"
  done
}

# no hooks found for this glow
hook_flow_help_050_help_unknownflow()
{
  echo "
hook->flow/help 050 : UNKNOWN FLOW HELP MESSAGE GOES HERE [flow:$1]

- explain that we found no hooks for this flow, so it does not technically exist
"
  # Include general help
  hook_flow_help_050_help_generalhelp
}
# hook not found for this flow
hook_flow_help_050_help_unknownhook()
{
  echo "
hook->flow/help 050 : UNKNOWN FLOW HOOK HELP MESSAGE GOES HERE [flow:$1][hook:$2]

- explain that this hook was not found for this flow
- explain what makes a valid hook
- explain how to find a list of the active hooks for a flow
"
  # Include general help
  hook_flow_help_050_help_generalhelp
}

# Show the help hooks for a flow
hook_flow_help_050_help_flowhelp()
{
  local FLOW=$1
  shift

  debug --level 6 --topic "HOOK>FLOW->HELP->050" "handing off help to help hook for flow [flow:\"${FLOW}\"]"
  hooks_execute "flow/${FLOW}" --state "help" $@
}
# print a list of active hooks for a flow/state
hook_flow_help_050_help_hooklist()
{
  debug --level 7 --topic "HOOK>FLOW->HELP->050" "Executing hook list for command [flow:$1][state:$2][hooks:$3]"

  local flow="$1"
  local state="$2"
  local hooks="$3"

  echo "
ACTIVE HOOKS FOR STATE: ${state}
=============================================="
  shift

  for hook in ${hooks}; do
    local label="$(hook_label ${hook} $@)"
    local description="$(hook_description ${hook} $@)"
    echo "  -->${label} : ${description}"
  done
}
# show the help for a flow hook
hook_flow_help_050_help_hookhelp()
{
  local label=$1
  local hook=$2
  shift 2

  echo "
HOOK HELP FOR: $label
======================================================="
  hook_help ${hook} $@
}
# show a message when the hook being used is related to this help system
hook_flow_help_050_help_hookhelpforbidden()
{
  local label=$1
  local hook=$2
  shift 2

  echo "
HOOK HELP:
==========
can't give hook help for: $label.  This hook is a part of the above message, so is not
considered a valid help target."

}
