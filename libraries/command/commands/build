#!/bin/sh
#
# COMMAND: Build a new image[:version] for a project
#

# list all the paths that contain builds in the system
builds_getpath()
{
  local library=""
  for library in `libraries_list`; do
    local path="`library_path \"${library}\"`/builds"
    if path_is --dir "${path}"; then
      echo "${path}"
    fi
  done
}
# List all the builds in the system
builds_list()
{
  libraries_contents --dir --subpath "builds"
}
# find the path to a particular build
build_find()
{
  local build=$1
  local path=::
  for path in `builds_list`; do
    if [ "${build}" == "${path##*/}" ]; then
      echo "${path}"
      return 0
    fi
  done
  return 1
}


# command help function
build_help()
{
  # this command uses these docker scopes, so help might be needed for them
  help_scope_add "docker:docker_build"

  echo "
Build a project related docker image.

The intention with this command is to build the project specific
image, which will then be used as a base image for all project containers
This base image can then be forked into different version, for different
purposes.

Another use of the function is to build/rebuild a required parent image,
that is the basis of the project specific container.
If you keep all of your builds in a /builds folder, then they
can easily be built by passing the individual folder names to this command.

  -b|--build {build} : override the build, the path to the Dockerfile
    as a sub-path of the one of the build directories:
    ${path_builds}

  -i|--image {image} : overrides settings image name for new image
  -v|--version {version} : overrides settings image version for new image

@NOTE the docker_build function uses \"latest\" as the default
  image version/tag.
"
  echo "Paths in the system that container builds:"

  for build in `builds_getpath`; do
    echo " --> ${build}"
  done
  echo "Builds found in the system:"
  for build in `builds_list`; do
    echo " --> ${build##*/}"
  done
}

# command execute function
build_execute()
{
  # default build settings
  local image="${project_image}"
  local build="${project_build:-${project_image}}"
  local version="${project_imageversion}"

  # local flags
  local flags=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -b|--build)
        image="${2}"
        build="${2}"
        shift
        ;;
      -f|--force)
        flags="${flags} --force"
        ;;
      -i|--image)
        image="${2}"
        shift
        ;;
      -v|--version)
        version="${2}"
        shift
        ;;
      *)
        echo >&2 "unknown flag $1 : build [-b|--build {build}}] [-f|--force] [-i|--image {image}] [-v|--version {version}]"
        break;; # terminate while loop
    esac
    shift
  done

  # build on the flags (valid for both create and destroy)
  flags="${flags} --image ${image}"
  if [ -n "${version}" ]; then
    flags="${flags} --version ${version}"
  fi

  local path="`build_find $build`"

  build_build ${flags} --path "${path}"
  return $?
}

# try to find a build in a build path
build_find()
{
  local build=$1
  local path=""

  # determine which build folder has the build
  for path_build in `builds_getpath`; do
    path="${path_build}/${build}"
    if [ -d ${path} ]; then
      echo "${path}"
    fi
  done
}

# build function
#
# @note --image and --version are optional, --path is required
build_build()
{
  # don't force buld existing images
  local force=0

  # local flags
  local flags=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -f|--force)
        force=1
        flags="${flags} --force"
        ;;
      -p|--path)
        local path="${2}"
        shift
        ;;
      -i|--image)
        local image="${2}"
        flags="${flags} --image ${image}"
        shift
        ;;
      -v|--version)
        local version="${2}"
        flags="${flags} --version ${version}"
        shift
        ;;
      *)
        echo >&2 "unknown flag $1 : build_build [-f|--force] -i|--image {image} -v|--version {version} -p|--path {path}"
        break;; # terminate while loop
    esac
    shift
  done

  local tag="${image}"
  if [ -z "$version" ]; then
    tag="${tag}:${version}"
  fi

  if docker_image_exists "${tag}" ; then
    if [ $force -eq 0 ]; then
      debug --level 4 --topic "COMMAND->BUILD" "build_build() :: error building custom image, image already exists: ${tag}"
      return 1
    else
      debug --level 4 --topic "COMMAND->BUILD" "build_build() :: image already exists, forcing build anyway due to force flag: ${tag}"
    fi
  fi

  # test to see if the build exists
  if path_is --build "${path}" ]; then
    # Run the build function
    debug --level 5 --topic "COMMAND->BUILD" "build_build() :: building custom image [ handing off to docker abstraction ] ==> docker_build ${flags} --path ${path}"
    docker_build ${flags} --path "${path}"
    return $?
  else
    debug --level 5 --topic "COMMAND->BUILD" "build_build() :: error building custom image, path to build doesn't exist or is not a build path [path:${path}]"
    return 1
  fi

}
