#!/bin/sh
#
# COMMAND: Get access to a shell running on a certain image
#

# Load the exec command
command_load "exec"

# command description function
shell_description()
{
  echo "Get access to a shell in a new container"
}

# Command help function
shell_help()
{
  echo "
Give shell access to a running container.

SYNTAX
======

  $/> boch command shell {options}

OPTIONS
=======

  -c|--container \"{container}\" : specify which container
  -

@NOTE this command used to give access to a shell in a new
   temporary container.  This functionality has been moved
   to the \"sandbox\" command.
"
}

# Command execute function
shell_execute()
{
  # which container to run the shell in
  local container="${project_container}"
  # use the machine shell or pass in a command
  local command="${machine_shell}"
  # which user to run the shell as
  local user="${machine_username}"

  local flags=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -c|--container)
        flags="${flags} --name $2"
        shift
        ;;
      -s|--shell)
        command="$2"
        shift
        ;;
      *)
        break;
    esac
    shift
  done


  if docker_container_running "${container}"; then

    message "Giving shell access container [${container}]:"
    message --separator

    # Run the exec command sudo handler function
    debug --level 5 --topic "COMMAND->SHELL" "shell [ handing off to exec command abstraction ] ==> exec_exec_sudo --user \"${user}\" --container \"${container}\" ${flags} ${command}"
    exec_exec_sudo --user "${user}" --container "${container}" ${flags} ${command}
    return $?

  else

    if docker_container_exists "${container}"; then
      message "Could not execute shell command in container (${container}) as it was not running"
      debug --level 5 --topic "COMMAND->SHELL" "Shell not started.  The container exists but is not running [container:${container}]"
    else
      message "Could not execute shell command in container (${container}) as it does not exist."
      debug --level 5 --topic "COMMAND->SHELL" "Shell not started.  The container does not exist [container:${container}]"
    fi
    return 1
  fi

}
