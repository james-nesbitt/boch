#!/bin/sh
#
# INIT:HOOK: Create the custom settings file
#

hook_version=2
hook_root="hook_init_010"

# descriptoin method
hook_init_010_description()
{
  echo "Populate the default customs settings file, Create it if missing"
}

# help method
hook_init_010_help()
{
  echo "
hook->init 010 : Populate the default customs settings.sh, Create it if missing

This hook does two things:
1. Makes sure that a custom settings file exists
2. Populates the settings file with the contents of any hook->settings->default
   hook that has not been added already.

@NOTE this hook leaves little messages in the settings file to indicate that it
  has added conents.  If you remove those messages, then the hook will think that
  they were never added, and remove them.
"
  hook_settings_default_010_help_hooklist "default" "`hooks_list \"settings\" --state \"default\"`"
}

# execute method
hook_init_010_execute()
{

  # path to this management system
  path="${path_customsettings:-"$path_data/settings"}"

  debug --level 5 --topic "HOOK->COMMAND->INIT->010" "Populating default settings file [${path}]"


  if [ ! -f ${path} ]; then

    # @NOTE This loop is here, because path_customsettings is technically
    # a space delimited list.  we will assume that the first item in the
    # list is our special item that we can create during init.

    debug --level 6 --topic "HOOK->COMMAND->INIT->010" "Creating missing default custom settings file [${path}]"
    echo "#!/bin/sh
#
# Overrideable configuration variables
#

" > ${path}

    chmod ug+rwx ${path}

  else
    debug --level 6 --topic "HOOK->COMMAND->INIT->010" "Default custom settings file already exists [${path}]"
  fi

  local hook=""
  for hook in `hooks_list "settings" --state "default" --file ${path}`; do

    hook_version=""
    hook_root=""

    hook_include ${hook} $@


    if [ "`egrep \"${hook_root}\" ${path}`" == "" ]; then

      echo "
## SETTINGS FROM HOOK : ${hook_root} [leave this line to prevent this hook from adding these settings again]
" >> ${path}
      #echo "`hook_execute ${hook}`" >> ${path}
      echo "`"${hook_root}_execute"`" >> ${path}

      debug --level 6 --topic "HOOK->COMMAND->INIT->010" "A hook provided default settings [hook_version:${hook_version}][hook_root:${hook_root}][hook:${hook}]"
    else
      debug --level 6 --topic "HOOK->COMMAND->INIT->010" "A hook provided default settings, but it is already included in the settings file [hook_version:${hook_version}][hook_root:${hook_root}][hook:${hook}]"
    fi

  done

}

# output a list (of hooks) for a state
hook_settings_default_010_help_hooklist()
{
  debug --level 7 --topic "HOOK->COMMAND->INIT->010" "Listing active default settings hooks"

  local state="$1"
  local hooks="$2"

  echo "
ACTIVE HOOKS: ${state}
=============================================="
  shift

  for hook in ${hooks}; do
    local label="$(hook_label ${hook} $@)"
    local description="$(hook_description ${hook} $@)"
    echo "  -->${label} : ${description}"
  done
}
