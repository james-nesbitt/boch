#!/bin/sh
#
# COMMAND: Attach to a running container
#

# command description function
attach_description()
{
  echo "Attach to a running container"
}

# command help function
attach_help()
{
  echo "
Attach input and output to the container if it is running

This attaches the input and output of the current terminal
to the input and output of a running container.

  -c|--container {container} : override the default container name with an ID or name of a running container
  -n|--noin : don't attach stdinput to the container (don't send input to the container)
  -s|--signals : send signals to the container process

@NOTE Exiting the attach may exit the running container
if the command in the container accepts input
"
}

# Command execute function
attach_execute()
{
  local container=${project_container}

  local flags=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -c|--container)
        container="${2}"
        shift
        ;;
      -n|--noin)
        flags="${flags} --noinput"
        ;;
      -s|--signals)
        flags="${flags} --signals"
        ;;
      -*)
        echo >&2 "unknown flag $1 : attach [-c|--container] {container}"
        exit
        ;;
      *)
        break;
    esac
    shift
  done

  if docker_container_running "${container}"; then

    # Run the stop function
    debug --level 5 --topic "COMMAND->ATTACH" "[ handing off to docker abstraction ] ==> docker_attach ${container}"
    docker_attach --container "${container}"
    return $?

  else

    if docker_container_exists "${container}"; then
      # Run the run function
      debug --level 5 --topic "COMMAND->ATTACH" "Could not attach as container is not running ${container}"
    else
      debug --level 5 --topic "COMMAND->ATTACH" "Could not attach as container does not exist ${container}"
    fi
    return 1

  fi
}
