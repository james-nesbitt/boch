#!/bin/sh
#
# hook:help Main help handler
#

hook_version="2"
hook_root="hook_command_help_050"

show_global_hooks="no"

# description method
hook_command_help_050_description()
{
  echo "Main help handler for the command tool"
}

# help method
hook_command_help_050_help()
{
  echo "
hook->help: Main help handler

This hook is the primary command help executor.  It will
write generic help to the screen, or it will load and
write command specific, and command and hook specific
help to the screen.

To get generic help try running without a command.
$/> ./command --help

"
}
# description method
hook_command_help_050_execute()
{

  # help functions have some flags
  local hook=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -t|--topic)
        topic=$2
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  # Command is the first argument
  command=$1
  shift

  if [ "$command" == "" ]; then

    hook_command_help_050_help_generalhelp $@

  else

    debug --level 6 --topic "HOOK->COMMAND->HELP->050" "including command \"${command}\""

    command_include ${command}

    if [ $? -gt 0 ]; then

      debug --level 6 --topic "HOOK->COMMAND->HELP->050" "command not found \"${command}\""

      if [ "${command}" != "" ]; then
    hook_command_help_050_help_unknowncommand ${command} $@
      else
    hook_command_help_050_help_generalhelp $@
      fi
    else

      hook_command_help_050_help_commandhelp ${command} $@
      local subtopic=${topic#*:}
      topic=${topic/:${subtopic}/}

      case "${topic}" in
        "hook")

          # subtopic is a hook
          local hook="${subtopic}"
          local helpfound="no"

          # do a list of all of the hooks
          local label=""
          local states="pre execute post help"
          for state in $states; do
            label="${state}"
            if [ "$state" == "execute" ]; then
              # execute is a placeholder for no state
              state=""
            else
              state="--state ${state}"
            fi
            local hooks="`hooks_list "command" ${state}` `hooks_list "command/${command}" ${state}`"

            if [ "$hooks" != "" ]; then
              for thishook in ${hooks}; do
                local hooklabel="`hook_label ${thishook}`"
                if [ "${hook}" == "${hooklabel}" ]; then
                  helpfound="yes"
                  if [ "${label}" == "help" ]; then
                    hook_command_help_050_help_hookhelpforbidden $hook $thishook
                  else
                    hook_command_help_050_help_hookhelp $hook $thishook
                  fi
                exit
                fi
              done
            fi
          done

          if [ "${helpfound}" == "no" ]; then
            hook_command_help_050_help_unknownhook ${command} ${hook} $@
          fi

        ;;
      *)
        debug --level 6 --topic "HOOK->COMMAND->HELP->050" "no help hook specified.  List all hooks instead."

        # do a list of all of the hooks
        local label=""
        local states="pre execute post help"
        if [ "${show_global_hooks}" == "yes" ]; then
          for state in $states; do
            label="${state}"
            if [ "$state" == "execute" ]; then
          # execute is a placeholder for no state
          state=""
            else
          state="--state ${state}"
            fi
            local hooks="`hooks_list "command" ${state}`"
            if [ "$hooks" != "" ]; then
          hook_command_help_050_help_hooklist "GLOBAL (any command)" "${label}" "${hooks}"
            fi
          done
        fi
        for state in $states; do
          label="${state}"
          if [ "$state" == "execute" ]; then
            # execute is a placeholder for no state
            state=""
          else
            state="--state ${state}"
          fi
          local hooks="`hooks_list "command/${command}" ${state}`"

          if [ "$hooks" != "" ]; then
            hook_command_help_050_help_hooklist ${command} "${label}" "${hooks}"
          fi
        done
      ;;
      esac

    fi

  fi
}

# generic help message for the command help system
# @TODO put some usefull material here
hook_command_help_050_help_generalhelp()
{
  echo "
hook->command/help 050 : GENERIC HELP MESSAGE GOES HERE

- explain the help system
- explain the hook system
  - explain that a command is actually run via a hook

- give examples for showing help for a command      -> ./command --help {command}
- give examples for showing help for a command hook -> ./command --help \"hook:{hook}\" {command}
"

  hook_command_help_050_help_commandlist

}
# output message if help is requested for an unknow command
hook_command_help_050_help_unknowncommand()
{
  echo "
hook->command/help 050 : UNKNOWN command HELP MESSAGE GOES HERE [command:$1]

- explain that his command is not known

"
  # Include general help
  hook_command_help_050_help_generalhelp
}
# output message if help was requested for an unkown hook
hook_command_help_050_help_unknownhook()
{
  echo "
hook->command/help 050 : UNKNOWN command HOOK HELP MESSAGE GOES HERE [command:$1][hook:$2]

- explain that this hooks was not found for this command
- explain what makes a valid hook
- explain how to find out what hooks run for a command
"
  # include general help
  hook_command_help_050_help_generalhelp
}
# List all of the commands
hook_command_help_050_help_commandlist()
{
  local path
  echo "
Known commands
=============="
  for path in `commands_list`; do
    echo "--> ${path}"
  done
}
# output help for a specific command
hook_command_help_050_help_commandhelp()
{
  local command=$1
  shift
  debug --level 6 --topic "HOOK->COMMAND->HELP->050" "handing off help to command help hook [command:\"${command}\"]"
  command_execute ${command} --action "help" $@
}
# output a list (of hooks) for a state
hook_command_help_050_help_hooklist()
{
  debug --level 7 --topic "HOOK->COMMAND->HELP->050" "Executing hook list for command [command:$1][state:$2][hooks:$3]"

  local command="$1"
  local state="$2"
  local hooks="$3"

  echo "
ACTIVE HOOKS: ${command}:${state}
=============================================="
  shift

  for hook in ${hooks}; do
    local label="$(hook_label ${hook} $@)"
    local description="$(hook_description ${hook} $@)"
    echo "  -->${label} : ${description}"
  done
}
# output the hook _help contents
hook_command_help_050_help_hookhelp()
{
  local label=$1
  local hook=$2
  shift 2

  echo "
HOOK HELP FOR: $label
=======================================================
"
  hook_help ${hook} $@
}
# in some cases it doesn't make sense to output hook help
# such as when it is this hook
hook_command_help_050_help_hookhelpforbidden()
{
  local label=$1
  local hook=$2
  shift 2

  echo "
HOOK HELP:
==========
can't give hook help for: $label.  This hook is a part of the above message, so is not
considered a valid help target.
"

}

