#!/bin/sh
#
# Command functionality
#
# include a command source
#
# $1 : command name (without full path, but can be a subpath)
#
# @NOTE commands are essentially libraries, but we load them differently
#   as we have multiple locations where they can be

# path to the command shell scripts
path_commands="${path_commands:-"${path_manage}/libraries/command/commands"}"

commands_addpath()
{
  path_commands="${path_commands} ${1}"
}

# Include a command
command_include()
{

  # Get the command as the first parameter
  local command=$1
  shift

  # define some local vars
  local path=""
  local path_command=""
  local success=-1

  debug --level 9 --topic "COMMAND->INCLUDE->CALL->${command}" "called with \"command_include $@\" [paths:${path_commands}]"

  # LIBRARY
  case " $included_commands " in
    *" ${command} "*)
      debug --level 7 --topic "COMMAND->INCLUDE" "command already included! [command:${command}][included_commands:${included_commands}]"
      success=0
    ;;

    *)

      # mark success to show that we didn't find the library
      success=-1
      for path_command in ${path_commands}; do
	path="${path_command}/${command}"

	debug --level 9 --topic "COMMAND->INCLUDE" "checking command path [command:${command}][path:${path}]"
	# do a quick check on if the path exists
	# @NOTE technically we don't need to use this, as load_library does it as well, but we do it just to save effort
	if [ -e "${path}" ]; then

	  debug --level 8 --topic "COMMAND->INCLUDE" "Including command.  Handing off to library_load ==> library_load --library \"command:${command}\" --path \"${path}\" $@"
	  library_load --library "command:${command}" --path "${path}" $@
	  success=$?

	  if [ $success -gt -1 ]; then
	    debug --level 7 --topic "COMMAND->INCLUDE" "Command included [command:${command}]"
	    break;
	  fi

	fi

      done

      if [ $success -eq -1 ]; then
	debug --level 6 --topic "COMMAND:INCLUDE" "Command include failed [command:${command}]"
      fi
    ;;
  esac
}

command_execute()
{
  local command=$1
  shift

  # include the command source file
  command_include ${command} $@
  if [ $? -eq 0 ]; then

    # default action
    local action="execute"

    while [ $# -gt 0 ]
    do
      case "$1" in
	-a|--action)
	  action=$2
	  shift
	  ;;
	*)
	    break;; # terminate while loop
      esac
      shift
    done

    debug --level 7 --topic "COMMAND:EXECUTE" "command [ ${command} ] handing off to command_execute script: library_execute --action \"${action}\" \"command:${command}\" $@"
    library_execute --action "${action}" "command:${command}" $@
    local success=$?

    if [ $success -eq 0 ]; then
      debug --level 8 --topic "COMMAND:EXECUTE" "${command} succeeded."
    else
      debug --level 6 --topic "COMMAND:EXECUTE" "Command execution failed for command ${command}.  Command method returned an error"
    fi
    return $success

  else
    debug --level 6 --topic "COMMAND:EXECUTE" "Command execution failed for command ${command}.  Could not find command"
    return 1
  fi
}
