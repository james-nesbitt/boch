#!/bin/sh
#
# Command functionality
#
# @NOTE commands are essentially libraries, with components. For
#   more information about libraries and components, check the
#   _libraries include in the manage root.
#
# A command is a command library component that is designed as a
# mid-level docker abstraction, to perform essentially a single
# docker task.  Each command sites on top of one or more related
# low level docker abstractions, but is aware of the project
# configuration, and is generally responsible for validation and
# verification before execution.
#
# As library components, commands can be found in any library,
# in a 'commands' sub-folder, but the core commands can be found
# as components in the commands library itself.
#

# Include a command : really just hands off to library include
command_load()
{

  # Get the command as the first parameter
  local command=$1
  shift

  debug --level 8 --topic "COMMAND->INCLUDE" "Including command component.  Handing off to library_include ==> library_include --library \"command\" --component \"commands:${command}\" $@"
  library_load --component "${command}" "command" $@
  local success=$?

  if [ $success -eq 0 ]; then
    debug --level 7 --topic "COMMAND->INCLUDE" "Command included [command:${command}]"
  else
    debug --level 6 --topic "COMMAND:INCLUDE" "Command include failed [command:${command}]"
  fi
  return $success
}

# Execute a command
#
# -a|--action {action} : specify a method to run other than 'execute'
#
# @NOTE the library handler runs a fail if the action fails
# @NOTE use the 'help' action to display help for a command
command_execute()
{
  local command=$1
  shift

  if [ $? -eq 0 ]; then

    # default action
    local action="execute"

    while [ $# -gt 0 ]
    do
      case "$1" in
        -a|--action)
          action=$2
          shift
          ;;
        *)
          break;; # terminate while loop
      esac
      shift
    done

    debug --level 7 --topic "COMMAND:EXECUTE" "command [ ${command} ] handing off to command_execute script: library_execute --action \"${action}\" --component \"commands:${command}\" \"command\" $@"
    library_execute --action "${action}" --component "${command}" "command" $@
    local success=$?

    if [ $success -eq 0 ]; then
      debug --level 8 --topic "COMMAND:EXECUTE" "${command} ${action} succeeded."
    else
      debug --level 6 --topic "COMMAND:EXECUTE" "Command execution failed for command.  Command method returned an error [command:${command}]"
    fi
    return $success

  else
    debug --level 6 --topic "COMMAND:EXECUTE" "Command execution failed.  Could not find command [command:${command}]"
    return 1
  fi
}

# List all of the commands
commands_list()
{
  echo "`libraries_list_components \"commands\"`"
}
