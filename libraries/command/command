#!/bin/sh
#
# Command functionality
#
# include a command source
#
# $1 : command name (without full path, but can be a subpath)
#
# @NOTE commands are essentially libraries, but we load them differently
#   as we have multiple locations where they can be


# list manager for command paths
commands_addpath()
{
  list_add "path_commands" "${1}"
}
commands_getpath()
{
  list_get "path_commands"
}

# list manager for included commands
commands_addincluded()
{
  list_add "included_commands" "$1"
}
commands_getincluded()
{
  list_get "included_commands"
}

# path to the command shell scripts
commands_addpath "${path_manage}/libraries/command/commands"

# Include a command
command_include()
{

  # Get the command as the first parameter
  local command=$1
  shift

  debug --level 8 --topic "COMMAND->INCLUDE->CALL->${command}" "called with \"command_include $@\" [paths:`commands_getpath`"

  # LIBRARY
  case " `commands_getincluded` " in
    *" ${command} "*)
      debug --level 7 --topic "COMMAND->INCLUDE" "command already included! [command:${command}][included_commands:${included_commands}]"
      return 0
    ;;

    *)

      debug --level 8 --topic "COMMAND->INCLUDE" "Including command component.  Handing off to library_include ==> library_include --library \"command\" --component \"commands:${command}\" $@"
      library_include --component "commands:${command}" "command" $@
      local success=$?

      if [ $success -eq 0 ]; then
        commands_addincluded "${command}"
        debug --level 7 --topic "COMMAND->INCLUDE" "Command included [command:${command}]"
      else
        debug --level 6 --topic "COMMAND:INCLUDE" "Command include failed [command:${command}]"
      fi
      return $success
    ;;
  esac

}

# Execute a command
#
# -a|--action {action} : specify a method to run other than 'execute'
#
# @NOTE the library handler runs a fail if the action fails
command_execute()
{
  local command=$1
  shift

  if [ $? -eq 0 ]; then

    # default action
    local action="execute"

    while [ $# -gt 0 ]
    do
      case "$1" in
        -a|--action)
          action=$2
          shift
          ;;
        *)
          break;; # terminate while loop
      esac
      shift
    done

    debug --level 7 --topic "COMMAND:EXECUTE" "command [ ${command} ] handing off to command_execute script: library_execute --action \"${action}\" --component \"commands:${command}\" \"command\" $@"
    library_execute --action "${action}" --component "commands:${command}" "command" $@
    local success=$?

    if [ $success -eq 0 ]; then
      debug --level 8 --topic "COMMAND:EXECUTE" "${command} succeeded."
    else
      debug --level 6 --topic "COMMAND:EXECUTE" "Command execution failed for command.  Command method returned an error [command:${command}]"
    fi
    return $success

  else
    debug --level 6 --topic "COMMAND:EXECUTE" "Command execution failed.  Could not find command [command:${command}]"
    return 1
  fi
}

# List all of the commands
commands_list()
{

  local path
  local path_command

  for path_command in `commands_getpath`; do
    for path in ${path_command}/*; do
      if [ -e ${path} ]; then
              echo "${path}"
      fi
    done
  done

}
