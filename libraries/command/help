#!/bin/sh
#
# Help hander
#

# description method
command_help()
{
  # Command is the first argument
  command=$1
  shift

  if [ -z "$command" ]; then

    command_help_generalhelp $@

    help_scope_add "command"
    help_scope_list

  else

    debug --level 6 --topic "COMMAND->HELP" "including command \"${command}\""
    command_load ${command}

    if [ $? -gt 0 ]; then

      debug --level 6 --topic "COMMAND->HELP" "command not found \"${command}\""
      command_help_unknowncommandhelp ${command} $@

    else

      command_help_commandhelp ${command} $@

      help_scope_add "command:${command}"
      help_scope_list

    fi

  fi
}

# method to list all command topics in scope
command_helplist()
{
  local scope=""
  if [ -n "${1}" ] && [ "${1}" != "command" ]; then
    scope="command/${1}"
    echo "HOOKS THAT ACT ON $1 COMMAND OPERATIONS:
"
  else
    scope="command"
    echo "HOOKS THAT ACT ON ALL COMMAND OPERATIONS:
"
  fi

  # list all hooks that act on this scope
   help_topic_list "hook:${scope}"
}

# generic help message for the command help system
# @TODO put some usefull material here
command_help_generalhelp()
{
  echo "Help for the Command Library

This library provides high level docker interaction tools as library
components.  Each component is meant to provide a single docker task,
often something that is handed off to the docker API.  These components
have their own help methods, and are aware of the project settings, so
they have good concepts of default settings.

@NOTE that while command components are self-encapsulated, the commands
are run through a set of hooks, so any pre/post hooks can be added to
other libraries to interact with the call.

You can get more help for a command by adding --help to the control call
or by using the help script directly:

$/> ./control --help build
OR
$/> ./help command:build

Commands often relate to other libraries, so the help information for
a command, may include a list of help topics.  It will often be displayed
in a list/table, and look like this:

--> {topic description} ({topic})

If command help information provides a list of topics, you can get for
that topic by passing it into the help call like this:

$/> ./control --help \"{topic}\" {command}
OR
$/> ./help \"{topic}\"
"

  command_help_commandlist

}
# output message if help is requested for an unknow command
command_help_unknowncommandhelp()
{
  echo "Unknow command $1

You have tried to get help for a command that we could not find in the system.

"
  # Include general help
  command_help_generalhelp
}
# List all of the commands
command_help_commandlist()
{
  local path
  echo "
Known commands
=============="
  local command=""
  for path in `commands_list | sort`; do
    command="${path%:*}"
    echo "--> ${command} : `library_execute --action \"description\" --component \"${command}\" \"command\"` (command:${command})"
  done
}
# output help for a specific command
command_help_commandhelp()
{
  local command=$1
  shift
  debug --level 6 --topic "COMMAND->HELP" "handing off help to command help hook [command:\"${command}\"]"
  command_execute ${command} --action "help" $@
}
