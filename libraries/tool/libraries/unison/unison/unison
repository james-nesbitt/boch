#!/bin/sh
#
# remote library handler
#

####
# UNISON sync paths
#
# Each list entry is a path to map into
# the current unison setting
#
unison_sync_path_add()
{
  list_add "unison_sync_path" $1
}
unison_sync_path_get()
{
  list_get "unison_sync_path"
}

####
# Implement a unison sync
#
# @NOTE this is currenty not very well tested, but is the start of an abstraction. It is currently
#     mainly limited by the need to pass in a full socket, including IP
#
# Usage:
#   union_sync <options> <host_path> <destination_path>
#
# Options:
#      -p|--port   : use this port for the destination
#      -s|--socket : use this socket root for the destination
#      -i|--ip     : use this IP to find the destination
#
# Arguments:
#   host_path : a path in the source to map (can use the shortened syntax)
#   destination_path : a path on the container (must be a full socket, if neither -i nor -s is passed)
#
# @TODO make this be able to determine the spcket IP and port, so that only a container path needs to be used
# @TODO throw a debug message on failure
unison_sync()
{

  local ip=''
  local port="${unison_socket_port}"
  local socket_root=''

  while [ $# -gt 0 ]
  do
    case "$1" in
      -p|--port)
        port="${2}"
        shift
        ;;
      -s|--socket)
        socket_root="${2}"
        shift
        ;;
      -i|--ip)
        ip="${2}"
        shift
        ;;
      *)
        break;
    esac
    shift
  done

  local sync_path_host="${1}"
  shift
  local sync_path_container="${1}"
  shift

  local arguments="${unison_arguments}"

  # if no socket was passed in, build it from the ip and port (if provided)
  # if you provided no socket or port, then you should have made the sync_path_container contain the socket
  #if [ -n "${socket_root}" ]; then
    sync_path_socket="${socket_root}/${sync_path_container}"
  #fi
  #if [ -n "{$ip}" ]; then
  #  socket_root="socket://${ip}:${port}"
  #  sync_path_socket="${socket_root}/${sync_path_container}"
  #fi
  #if [ -z "${sync_path_socket}" ]; then
  #  sync_path_socket="${sync_path_container}"
  #fi

  debug --level 6 --topic "UNISON->SYNC" "Executing: [unison -silent -ignore 'Name {.git,*.swp}' -batch -confirmbigdel=false -ui text ${sync_path_host} ${sync_path_socket}][fswatch -0 -o ${sync_path_host} | xargs -0 -n 1 -I {} unison ${arguments} ${sync_path_host} ${sync_path_socket}]"
  # Execute the unison and the fswatch as a binary AND to prevent the second from starting if the first fails
  unison -silent -ignore 'Name {.git,*.swp}' -batch -confirmbigdel=false -ui text ${sync_path_host} ${sync_path_socket} && \
  fswatch -0 -o ${sync_path_host} | xargs -0 -n 1 -I {} unison -silent -ignore 'Name {.git,*.swp}' -batch -confirmbigdel=false -ui text ${sync_path_host} ${sync_path_socket}

  return $?
}