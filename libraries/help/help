#!/bin/sh
#
# Shared help system
#

###
# maintain a list of hook scopes for help, so that
#
# add to the list
help_scope_add()
{
  list_add "help_scope" $@
}
# retrieve the help topic list
help_scope_get()
{
  list_get "help_scope"
}

# primary help execute method
#
# @NOTE Try to use this if you want to get help on a topic
#       and you want it to react to a missing topic with a
#       general help message
#
help_execute()
{
  # this function should respond to bad usage
  if [ -z "$1" ]; then
    help_notopic_help
    return $?
  else
    help_topic_help $@
    return $?
  fi
}

# this is not likely to ever happen, unless it was called incorrectly
help_notopic_help()
{
  echo "The help library

This library is used to provide methods for other libraries, and hooks
to encapsulate their own help information, so that a user can pull that
information using the general commands.
You are receiving general help information about this library, as no
known topic was requested.

LIBRARY HELP

Any library can include a help file, which should have at least a
{library}_help method.  That method is responsible for outputting help
information about any passed in topics, and general help for the library
if not topic is passed.  Note that topics aren't checked before being
passed in, so the help method should check for valid topics.

TOPICS

When reveiving help, you will often see at the bottom of the help, a list
of topics for further help.  Each topic will include a small description
followed by a topic label, in (brackets).  That topic can be passed
back into the system to get more help.

SCOPES

A library can also include a {library}_helplist method, which can list
topics in a certain scope.  Libraries in use in the system, can add scopes
to the help system, so that it can list all topics in scope.

Often, a library will implement something like this:
    # add some scopes to the list
    help_scope_add "{library}"
    help_scope_add "{library}:{scope1}"
    help_scope_add "{library}:{scope2}"

    # get an output list of all topics in scopes that have been added
    help_scope_list

EXAMPLES

While most of the scripts in this system can offer help, by adding a
--help [{topic}] argument to the call, the help script exists soley to
provide help information.

# Getting help on the build command
$/> ./control --help build
OR
$/> ./help command:build

Getting general help on the flow system
$/> ./flow --help
OR
$/> ./help flow:general

# getting help on a topic from a topic list

If you get help for the init flow
$/> ./flow --help init
OR
$/> ./help flow:init

You may see a list like this:
--> hook_flow_init_400 Some kind of help topic (flow:~flow/hooks/flow/init/400_something)

You can add the contents of the round bracket to the help call, and get
more information about the topic:

$/> flow --help flow:flow~hooks/flow/init/400_something init
OR
$/> help flow:flow~hooks/flow/init/400_something

"
}

# A callable help handler for a help topic
help_topic_help()
{
  local handler="${1}"
  shift

  if [ "${handler}" == "${handler%:*}" ]; then
    topic="${1}"
    shift
  else
    # split the primary scope handler from the topic
    topic="${handler##*:}"
    handler="${handler%:*}"
  fi

  debug --level 5 --topic "HELP->TOPIC" "Executing help [handler:${handler}][tpoic:${topic}]: $@"

  # Use the "general" topic for any missing topics
  if [ "${handler}" == "${topic}" ]; then
    topic=""
  fi
  if [ "${topic}" == "general" ]; then
    topic=""
  fi

  # include any library help include
  if [ "${handler}" != "help" ]; then
    debug --level 6 --topic "HELP->TOPIC" "Including help handler [handler:${handler}]"
    library_include "${handler}" "help"
  fi

  # Run the help action, followed by any help hooks
  debug --level 7 --topic "HELP->TOPIC" "Executing help handler [topic:${topic}][handler:${handler}]"
  library_execute --action "help" "${handler}" $topic $@
  debug --level 7 --topic "HELP->TOPIC" "Executing help hooks [topic:${topic}][handler:${handler}]"
  hooks_execute "help/${handler}" ${topic} $@

}

# provide the list help for all active help scopes
help_topic_list()
{
  debug --level 9 --topic "HELP->TOPICLIST" "Executing help topic list : $@"
  local scope="${1}"
  shift

  # split the primary scope handler from the topic
  handler="${scope%:*}"
  topic="${scope##*:}"
  if [ "${handler}" == "${scope}" ]; then
    scope=""
  fi
  if [ "${topic}" == "general" ]; then
    topic=""
  fi

  if [ "${handler}" != "help" ]; then
    debug --level 6 --topic "HELP->TOPICLIST" "Including help handler [handler:${handler}]"
    library_include "${handler}" "help"
  fi

  debug --level 7 --topic "HELP->TOPICLIST" "Running list action on topic [topic:${topic}][handler:${handler}]"
  library_execute --action "helplist" "${handler}" $topic $@
  debug --level 7 --topic "HELP->TOPICLIST" "Running list action on topic help hooks [topic:${topic}][handler:${handler}]"
  hooks_execute "help/${handler}" --action "helplist" ${topic}
}

# list all the topics that have been added to scope
help_scope_list()
{
  local scope=""
  for scope in `help_scope_get`; do
    help_topic_list "${scope}"
  done
}

####
# Help Handler
#
# For any other library we would put this into
# an include called help, which in this library
# is the same filename as the library handler
# so we just keep it here, and hack past that in
# the help executor

# execute method
help_help()
{
  local topic="$1"
  case "${topic}" in
    init)
      help_help_topic_init
      ;;
    hooks)
      help_help_topic_hooks
      ;;
    project)
      help_help_topic_project
      ;;
    libraries)
      help_help_topic_libraries
      ;;
    *)
      if [ -n "${topic}" ]; then
        help_help_unknowntopic "${topic}" $@

        help_scope_add "help"
        help_scope_list
      fi

      help_help_general
    ;;
  esac

  # always display system help topics here
  help_scope_add "help"
  help_scope_list
}

# list help topics method
help_helplist()
{
  echo "SYSTEM HELP TOPICS
--> System initialization (help:init)
--> Libraries (help:libraries)
--> Hooks (help:hooks)
--> The project folder (help:project)
"
  echo "LIBRARIES THAT SHOULD HAVE HELP TOPICS:"
  local library=""
  for library in `libraries_list | sort`; do
    case "${library%:*}" in
      "core"|"help")
        ;;
      *)
        if library_include "${library%:*}" "help"; then
          echo "--> ${library%:*} (${library%:*}:general)"
        fi
    esac
  done
}


help_help_general()
{
 echo "This is the generic help handler for the toolset

- give a description on how the system works
- explain that there are two primary scripts (control and flow)

- explain what help topic are
  - explain that help topics have a semicolon separator
  - give some examples of hooks
  - explain that the {topic}:general topic has a specific purpose
  - explain that a list of system help topics will be listed below

- explain that help topics are library specific
  - explain that a list of libraries follows
  - warn that this list of libraries depends on what libraries are
    currently loaded.

If you see a help topic in round bracket in any help page, you can
get more help from the system using the help command:

TOPICS: --> a help topic here (library:help-topic)

Then use this : $/> ./help library:help-topic
to get more help
"
}

# Unknow topic message
help_help_unknowntopic()
{
  topic="$1"

 echo "UNKNOWN TOPIC MESSAGE

Could not find any help for your topic: ${topic}

"
}

help_help_topic_init()
{
 echo "Help topic handler for system initialization

- explain how init works
- explain what the _init script is
"
}

help_help_topic_libraries()
{
 echo "Help topic handler for libraries

- explain what libraries are
- discuss what libraries can container
- explain how libraries are included

- suggest including a library in your project folder
"
}

help_help_topic_hooks()
{
 echo "Help topic handler for hooks

- shortly explain hooks
- suggest looking for help on topic hook:
"
}

help_help_topic_project()
{
 echo "Help topic handler for the project folder

- explain that the project folder is for your project
- explain that the project folder is a library
  - explain how to get help on libraries
"
}

