#!/bin/sh
#
# Shared help system
#

###
# maintain a list of hook scopes for help, so that
#
# add to the list
help_scope_add()
{
  list_add "help_scope" $@
}
# retrieve the help topic list
help_scope_get()
{
  list_get "help_scope"
}

# primary help execute method
#
# @NOTE Try to use this if you want to get help on a topic
#       and you want it to react to a missing topic with a
#       general help message
#
help_execute()
{
  # this function should respond to bad usage
  if [ -z "$1" ]; then
    help_help_general
    return $?
  else
    help_topic_help $@
    return $?
  fi
}

# A callable help handler for a help topic
help_topic_help()
{
  local handler="${1}"
  shift

  if [ "${handler}" == "${handler%:*}" ]; then
    topic="${1}"
    shift
  else
    # split the primary scope handler from the topic
    topic="${handler##*:}"
    handler="${handler%:*}"
  fi

  debug --level 5 --topic "HELP->TOPIC" "Executing help [handler:${handler}][topic:${topic}]: $@"

  # Use the "general" topic for any missing topics
  if [ "${handler}" == "${topic}" ]; then
    topic=""
  fi
  if [ "${topic}" == "general" ]; then
    topic=""
  fi

  # include any library help include
  if [ "${handler}" != "help" ]; then
    debug --level 6 --topic "HELP->TOPIC" "Including help handler [handler:${handler}]"

    library_include "${handler}" "help"
    if [ $? -gt 0 ]; then
      debug --level 5 --topic "HELP->TOPIC" "Help handler not found [topic:${topic}][handler:${handler}]"
      return 1
    fi
  fi

  # Run the help action, followed by any help hooks
  debug --level 7 --topic "HELP->TOPIC" "Executing help handler [topic:${topic}][handler:${handler}]"
  library_execute --action "help" "${handler}" $topic $@
  debug --level 7 --topic "HELP->TOPIC" "Executing help hooks [topic:${topic}][handler:${handler}]"
  hooks_execute "help/${handler}" ${topic} $@

}

# provide the list help for all active help scopes
help_topic_list()
{
  debug --level 9 --topic "HELP->TOPICLIST" "Executing help topic list : $@"
  local scope="${1}"
  shift

  # split the primary scope handler from the topic
  handler="${scope%:*}"
  topic="${scope##*:}"
  if [ "${handler}" == "${scope}" ]; then
    scope=""
  fi
  if [ "${topic}" == "general" ]; then
    topic=""
  fi

  if [ "${handler}" != "help" ]; then
    debug --level 6 --topic "HELP->TOPICLIST" "Including help handler [handler:${handler}]"
    library_include "${handler}" "help"
  fi

  debug --level 7 --topic "HELP->TOPICLIST" "Running list action on topic [topic:${topic}][handler:${handler}]"
  library_execute --action "helplist" "${handler}" $topic $@
  debug --level 7 --topic "HELP->TOPICLIST" "Running list action on topic help hooks [topic:${topic}][handler:${handler}]"
  hooks_execute "help/${handler}" --action "helplist" ${topic}
}

# list all the topics that have been added to scope
help_scope_list()
{
  local scope=""
  for scope in `help_scope_get`; do
    help_topic_list "${scope}"
  done
}

####
# Help Handler
#
# For any other library we would put this into
# an include called help, which in this library
# is the same filename as the library handler
# so we just keep it here, and hack past that in
# the help executor

# execute method
help_help()
{
  local topic="$1"
  case "${topic}" in
    bootstrap)
      help_help_topic_bootstrap
      ;;
    hooks|hook)
      help_help_topic_hooks
      ;;
    projectconf)
      help_help_topic_projectconf
      ;;
    userconf)
      help_help_topic_userconf
      ;;
    libraries|library)
      help_help_topic_libraries
      ;;
    *)
      if [ -n "${topic}" ]; then
        help_help_unknowntopic "${topic}" $@

        help_scope_add "help"
        help_scope_list
      fi

      help_help_general
    ;;
  esac

  # always display system help topics here
  help_scope_add "help"
  help_scope_list
}

# list help topics method
help_helplist()
{
  echo "SYSTEM HELP TOPICS
--> System bootstrap initialization (help:boostrap)
--> Libraries (help:libraries)
--> Hooks (help:hooks)
--> The project folder/library (help:projectconf)
--> The user folder/library (help:userconf)
"
  echo "LIBRARIES THAT SHOULD HAVE HELP TOPICS:"
  local library=""
  for library in `libraries_list | sort`; do
    case "${library%:*}" in
      "core"|"help")
        ;;
      *)
        if library_include "${library%:*}" "help"; then
          echo "--> ${library%:*} (${library%:*}:general)"
        fi
    esac
  done
}


help_help_general()
{
 echo "This is the generic help handler for the toolset

The help library

This library is used to provide methods for other libraries, and hooks
to encapsulate their own help information, so that a user can pull that
information using the general commands.
You are receiving general help information about this library, as no
known topic was requested.

LIBRARY HELP

Any library can include a help file, which should have at least a
{library}_help method.  That method is responsible for outputting help
information about any passed in topics, and general help for the library
if not topic is passed.  Note that topics aren't checked before being
passed in, so the help method should check for valid topics.

TOPICS

When reveiving help, you will often see at the bottom of the help, a list
of topics for further help.  Each topic will include a small description
followed by a topic label, in (brackets).  That topic can be passed
back into the system to get more help.

SCOPES

A library can also include a {library}_helplist method, which can list
topics in a certain scope.  Libraries in use in the system, can add scopes
to the help system, so that it can list all topics in scope.

Often, a library will implement something like this:
    # add some scopes to the list
    help_scope_add "{library}"
    help_scope_add "{library}:{scope1}"
    help_scope_add "{library}:{scope2}"

    # get an output list of all topics in scopes that have been added
    help_scope_list

EXAMPLES

While most of the scripts in this system can offer help, by adding a
--help [{topic}] argument to the call, the help script exists soley to
provide help information.

# Getting help on the build command
$/> ./control --help build
OR
$/> ./help command:build

Getting general help on the flow system
$/> ./flow --help
OR
$/> ./help flow:general

# getting help on a topic from a topic list

If you get help for the init flow
$/> ./flow --help init
OR
$/> ./help flow:init

You may see a list like this:
--> hook_flow_init_400 Some kind of help topic (flow:~flow/hooks/flow/init/400_something)

You can add the contents of the round bracket to the help call, and get
more information about the topic:

$/> flow --help flow:flow~hooks/flow/init/400_something init
OR
$/> help flow:flow~hooks/flow/init/400_something
"
}

# Unknow topic message
help_help_unknowntopic()
{
  topic="$1"

 echo "Unkown help topic

The help system does not recognize your topic \"${topic}\".  Instead, more general help information is being shown.

"
}

help_help_topic_bootstrap()
{
 echo "Help topic handler for system boostrap

The system bootstraps primarly using the _init executable script in the library root folder.

The script only really performs 2 tasks:

1. determine paths to toolset components
2. source core includes;
3. load the core libraries.

Library Paths:

The toolset uses some bash trickery to try to locate the following:

1. The path to the root of the toolset, to be used for includes
2. The path to the root of the project, found by looking for a .boch
   folder in the parents of the current path.
3. The path to the optional user library (usually ~/.boch)

If the project root cannot be found, then a \"not found\" value is used,
marking it as not-existing.

Core Includes:

The toolset uses only 2 non-library includes:

1. _utilities : a set of script tools used to implement debug, path, and
   list functionality (help:utilities)
2. _libraries : a set of tools to load libraries, which implement all of
   the real functionality (help:libraries)

Core libraries:

The following core libraries are loaded in this order:
1. hooks : hook functionality (hook:general)
2. settings : Settings loading and default values (settings:general)
3. help : The help system providing this help (help:general)
4. docker : docker API tools (docker:general)
"
}

help_help_topic_libraries()
{
 echo "Help topic handler for libraries

The architecture of this toolset is very abstracted.  Most of the effort is handled in abstracted
library tools, which can contain a variety of implemented functionaly through includes and sub-folders.
The abstraction is handled in such a way, that usually any library can contain other functionality.  An
example of the abstraction is that any library can container a libraries folder, which can make new
libraries.
At a bare minimum, a library is defined as either a single executable script (anywhere) or a folder
which an executable script that matches the folder in name (without any "." characters.  A folder
without the executable script, is treated as a non-existant library.
Important core libraries are: docker, boot2docker, command, flow, settings and help; described later.

The toolset root is itself treated as a library, so it's /libraries folder is used as a source of
libraries, and treated like any other library (but used as the last place to look.)
Each project (optionally) has a root boch/ project folder, that contains project specific functionality.
This folder is treated as a library so it gains all of the advantages of a library.  If the toolset is
installed globally, then this is how the toolset identifies a project root, by looking for the project
folder (similar to how git looks for .git, and vagrant looks for Vagrantfile.)
Additionally, every system user can have a ~/.boch/ folder, which is also treated as a library, that
can provide user specific functionality across all projects.

All of these libraries can contain /libraries/ and /hooks/ folders, as well as /settings and /help
files to add functionality.  /Libraries/ can container additional libraries, and the others are
managed by different libraries, such as hook (hook:general), settings (settings:general)
and help (help:general).

There are two way in which libraries are included into execution. The first, and most common is to
use the library_load function; this function can be used in any library settings file, or library handler.
The second is to add an alias that starts with % or ^.  The alias system recognizes that either symbol
means that the matching library needs to be loaded (the prior keeps the alias)
Some flows such as init and install, include a flag for including additional libraries during their
flows.
"
}

help_help_topic_hooks()
{
 echo "Help topic handler for hooks

The second key component in the toolset is the hook concept, which allows any library to include an
ordered list of files that can be run on the triggering of certain events.  The files are sorted across
all libraries, to create a single ordered list.  Again, these files must be executable, or they are
ignored.  Hooks functionality is added with the core hooks library, but is used across the system,
so the library is not optional.  Some core implementations would not work without hooks (such as
commands and flows.)

The architecture of a hook is to place an executable script, in a library's /hooks/{hook/name/path}
folder.  Hooks are collected from every active library, sorted alphabetically across the libraries,
and executed in order.  If any hook returns -gt 0 value, then the process is stopped.

The anatomy of a hook depends on it's version.  Most hooks now are upgraded to version 2 format,
but new hooks may start as version 3.

Version 2

A version 2 hook, has two variable assignments, and at least three functions

Variables:
hook_version=2
hook_root=\"{a function prefix used for all functions in this hook}\"

Functions:
{hook_root}_description() : return a single line of text describing this hook
{hook_root}_help() : give more complex help for this hook
{hook_root}_execute() : execute the hook

* a hook template is offered as the docs/templates/hook
"
}

# help topic for the project library
help_help_topic_projectconf()
{
 echo "Help topic handler for the project library

Every project should have a .boch folder, in the project root, to mark the project
as a boch project.  The folder is actually optional, but boch will look up the path
tree looking for a folder, so that it can work from anywhere, like git and vagrant do.

The .boch folder in the root of a project, is called the projectconf folder.
The projectconf folder is technically a library, that is meant to be used to offer
settings overrides for you project.
Because the projectconf is a library, it must have an execuable boch file in it, and
it can contain any functionality as other libraries, including:
  - /libraries/ folder to contain libraries available only to this project; (help:libraries)
  - /hooks/ folder to contain hooks that will run only for this project; (hook:general)
  - /builds/ folder to container any docker builds available for the project; (docker:build)
  - /aliases/ folder to contain any project specific settings aliases (settings:aliases)

  - /settings file containing variable overrides and some function calls for the project
     (for example you may load a library in this file) (settings:general)
  - /boch : an executable file that exists to make the folder a valid library, but
     it can contain custom functions usefull for boch in your project

This folder can be created manually, but you can also use the \"init\" flow to generate
it automatically (flow:init)
For more help on libraries try using this help topic (help:libraries)
"
}
# help topic for the user library
help_help_topic_userconf()
{
 echo "Help topic handler for the user library

Every user can have a .boch folder in their home directory, to make additional tools
and functions available for their boch implementations, across all projects.

This .boch folder is actually a library.  Because it is a library, it must have an
executable script in the folder named boch, but it can also contain the same functionality
as any other library:
  - /libraries/ folder to contain libraries available only to this project; (help:libraries)
  - /hooks/ folder to contain hooks that will run only for this project; (hook:general)
  - /builds/ folder to container any docker builds available for the project; (docker:build)
  - /aliases/ folder to contain any project specific settings aliases (settings:aliases)

  - /settings file containing variable overrides and some function calls for the project
     (for example you may load a library in this file) (settings:general)

This folder can be created manually, but you can also use the \"install\" flow to generate
it automatically (flow:install)
For more help on libraries try using this help topic (help:libraries)
"
}

