#!/bin/sh
#
# hook:help Main help handler for hook help
#

hook_version="2"
hook_root="hook_help_hook_050"

show_global_hooks="no"

# description method
hook_help_hook_050_description()
{
  echo "Main help handler for hooks"
}

# help method
hook_help_hook_050_help()
{
  echo "
hook->help: Main help handler

This hook is the primary hook help executor for any hook
The hook will search out a hook and provide either a list entry
or a full help description for a hook.
"
}
# description method
hook_help_hook_050_execute()
{
  # hook is the first argument
  local hook="$1"
  shift

  if [ -z "${hook}" ]; then

    hook_help_hook_050_help_generalhelp $@

  else

    debug --level 6 --topic "HOOK->HOOK->HELP-050" "Running help for hook [hook:`hook_label \"${hook}\"`][path:${hook}][fullpath:`path_expand \"${hook}\"`]"
    if [ -f "`path_expand \"${hook}\"`" ]; then
      hook_help_hook_050_help_hook "${hook}"
    else
      hook_help_hook_050_help_unknownhook "${hook}"
    fi
  fi
}

# method to list all topics in scope
hook_help_hook_050_list()
{
  local scope="$1"
  local states="pre execute post"

  # hook flags
  local flags=""
  while [ $# -gt 0 ]
  do
    case "$1" in
      -s|--state)
        states="$2"
        shift
      ;;

      *)
        break;; # terminate while loop
    esac
    shift
  done

  local hook=""
  local hooks=""
  local state=""
  for state in ${states}; do

    hooks="`hooks_list \"${scope}\" --state \"${state}\"`"

    if [ -n "${hooks}" ]; then
      if [ "${state}" == "execute" ]; then
        echo "HOOKS FOR ${scope}"
      else
        echo "HOOKS FOR ${scope} THAT ACTIVATE IN STATE ${state}"
      fi

      for hook in ${hooks}; do
        echo "--> `hook_label \"${hook}\"` : `hook_description \"${hook}\"` (`hook_helppath \"${hook}\"`)"
      done
    fi
  done
}

# generic help message for the command help system
# @TODO put some usefull material here
hook_help_hook_050_help_generalhelp()
{
  echo "
hook->help->hook->050 : Getting help information about a hook

This message is a part of the general help system, and how it
can be used to get help about hooks.

Hooks in the system are individual scripts that can be dropped
in around the system, and respond to events.

The hooks system has it's own help provider, which can be used
to get more information about the hook system itself.  Every hook
has a help method. in which it can respond to requests for
more help about it's implementation.

Both $/>./control and $/>flow allow the passing of a specific
hook help request to get information about a specific request

For example, with a command, when you execute a generic help
request, you will get some help information about the command
following by a list of hooks that operate on the command scope.

$/> ./control --help command

HOOKS FOR command THAT ACTIVATE IN STATE post
--> 050_command_specific_post : HOOK->Command:post:specific: Run any command specific POST hooks (hook:command~command/post/050_command_specific_post)

You can get help for a particular hook by adding the hook path
to the --help command like this:

$/> ./control --help \"hook:command~command/post/050_command_specific_post\" command

"
}
# Output help for a hook
hook_help_hook_050_help_hook()
{
  local hook="$1"
  shift

  echo "
HELP FOR HOOK: ${hook}
"
  hook_execute "${hook}" --action "help" $@
}
# output message if help is requested for an unknow command
hook_help_hook_050_help_unknownhook()
{
  echo "
HELP REQUEST FOR UNKNOWN HOOK $1

you asked for help information about a hook in the system that cannot be found.

Perhaps the hook is not in scope for this help process, or you mistyped it
Try to copy the hook name from the hook list in the generic help.
"
}

