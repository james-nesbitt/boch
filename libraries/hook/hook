#!/bin/sh
#
# Hook related functionality
#

#
# Hooks
#
# Hooks are lists of function in particular paths, that are run in sequence
# in order to implement functionality.
#
# Hook Versions
#
# 1 : an inline script, without any _help or _execute methods
# 2 : a functional script with _help _description and _execute methods
#
# @TODO refactor to allow:
#   - allow hook exclusion

hooks_getpath()
{
  echo "`libraries_list_subpath \"hooks\"`"
}

###
# Run hooks for an operation
#
# Conceptually, the function arguments determine
# a number of paths, and all function in those
# paths are executed
#
# $1 : operation
# -s|--state {state} : state e.g. pre or post
# $@ : passed to the hook functions
#
hooks_execute()
{
  # require the first argument to be the operation
  local hook=$1
  shift

  # are we targeting a particular state
  local state=""
  # method to run (on v2 and later hooks)
  local action="execute"

  # base hooks path
  local paths=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -a|--action)
        action="${2}"
        shift
        ;;
      -s|--state)
        state="${2}"
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  if [ -n "${state}" ]; then
    local hooks_paths="`hooks_list ${hook} --state ${state}`"
  else
    local hooks_paths="`hooks_list ${hook}`"
  fi
  debug --level 8 --topic "HOOKS->EXECUTE" "hooks retrieved [hook:${hook}][state:${state}][hooks:${hooks_paths}]";
  local hook_path=""
  for hook_path in ${hooks_paths}; do

    debug --level 9 --topic "HOOKS->EXECUTE" "hook execution [hook:${hook}][state:${state}][hooks:${hooks_paths}]";
    hook_execute $hook_path --action "${action}" $@

    if [ $? -gt 0 ]; then
      debug --level 7 --topic "HOOKS->EXECUTE" "Hook return an error during execution [hook:${hook}][path:${hook_path}]"
      return 1
    else
      debug --level 8 --topic "HOOKS->EXECUTE" "executed hook [hook:${hook}]: ${path_hook##*/}"
    fi
  done

  debug --level 8 --topic "HOOKS->EXECUTE" "Hooks execution finished [hook:${hook}]"
  return 0
}

# List all hooks, in the sorted order
hooks_list()
{
  # require the first argument to be the command
  local hook=$1
  shift

  # base hooks path
  local paths=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -s|--state)
        hook="${hook}/${2}"
        shift
        ;;
      *)
        break;; # terminate while loop
    esac
    shift
  done

  # print all of the functions that match our hook, in any of the avaiable hook paths, but sorted based on integer prefix
  local hooks_paths="`hooks_getpath`"
  local hook_token=""
  for hook_token in `for path in ${hooks_paths}; do
    path="${path}/${hook}"
    debug --level 9 --topic "HOOK->INCLUDE" "Checking hook path [path:${path}]"
    if [ -d ${path} ]; then
      for path_hook in ${path}/*; do
        if [ -f ${path_hook} ] && [ -x ${path_hook} ]; then
          # add a sorting prefix that will sort based on file prefix (the integer numbers) instead of the path
          echo "${path_hook##*/}:${path_hook}"
        fi
      done
    fi
  done | sort`; do
    # remove the sorting prefix
    echo "${hook_token##*:}"
  done
}

# include the hook source file (from full path)
hook_include()
{
  debug --level 9 --topic "HOOK->INCLUDE" "Hook include run : $@"
  local hook=$1
  shift

  if [ -f ${hook} ]; then

    debug --level 9 --topic "HOOK->INCLUDE" "Including hook.  Handing off to _include_source [hook:${hook}] ==> _include_source \"${hook}\" $@ "
    _include_source "${hook}" $@
    local success=$?
    if [ $success -eq 0 ]; then
      debug --level 8 --topic "HOOK->INCLUDE" "hook included \"${hook}\""
    else
      debug --level 4 --topic "HOOK->INCLUDE->FAIL" "hook include failed for \"${hook}\""
    fi

  else

    debug --level 7 --topic "HOOK->INCLUDE->FAIL" "Hook could not be included as it was not found, or is not a file [hook:${hook}]"

  fi

  return $sucess
}

# execute a hook method (must be loaded already)
hook_execute()
{
  # hook is the first param
  local hook="$1"
  shift

  debug --level 9 --topic "HOOK->EXECUTE" "hook_execute [hook:${hook}]: START"

  # default action
  local action="execute"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -a|--action)
        action=$2
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  # clear out version and root vars so that the hook file can define them
  hook_version=""
  hook_root=""

  debug --level 8 --topic "HOOK->EXECUTE" "Including and Executing Hook script (source) [hook:$hook][hook_root:${hook_root}][hook_version:${hook_version}][args:$@]"

  # include hook - capture the output, as this may be an older version hook
  hook_include ${hook}

  # if the hook source set a hook_version, then react to the version
  case "$hook_version" in
    2)
      # version 2 hooks have methods named after the actions
      local hook_function="${hook_root}_${action}"
      debug --level 8 --topic "HOOK->EXECUTE" "Executing Hook script (source) [hook:${hook##*/}][action:$action][hook_root:${hook_root}][hook_function:${hook_function}]: ${hook_function} $@"
      eval ${hook_function} $@

      if [ $? -gt 0 ]; then
        debug --level 6 --topic "HOOK->EXECUTE" "Hook script return an error [hook:${hook##*/}][hook_function:${hook_function}]: ${hook_function} $@"
        return 1
      else
        debug --level 6 --topic "HOOK->EXECUTE" "Hook script executed [hook:${hook##*/}][hook_function:${hook_function}][path:${hook}]: ${hook_function} $@"
        return 0
      fi
      ;;
    *)
      # older version hooks execute inline.  they have only the execute action.
      debug --level 6 --topic "HOOK->EXECUTE" "this hook source exists, but did not define any version.  No action was executed as we assume this an older version hookfile [hook:$hook][hook_version:${hook_function}]"
      return 0
      ;;
  esac

}

# create a usable short label for a hook
hook_label()
{
  local hook=$1

  echo ${hook##*/}
}

# show the description hook echo for a hook
hook_description()
{
  local hook=$1
  shift

  hook_execute ${hook} --action "description" $@
}
# show the help contents for a hook
hook_help()
{
  local hook=$1
  shift

  hook_execute ${hook} --action "help" $@
}

# List all hooks, not in the sorted order
# @NOTE as the hooks_list function is difficult to debug
#   this function does something similar and outputs hooks lists
hooks_list_debug()
{
  # require the first argument to be the command
  local hook=$1
  shift

  # base hooks path
  local paths=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -s|--state)
        hook="${hook}/${2}"
        shift
        ;;
      *)
        break;; # terminate while loop
    esac
    shift
  done

  # print all of the functions that match our hook, in any of the avaiable hook paths, but sorted based on integer prefix
  local hooks_paths="`hooks_getpath`"
  local hook_token=""
  for path in ${hooks_paths}; do
    path="${path}/${hook}"
    if [ -d ${path} ]; then
echo "CHECKING HOOKS ROOT :${path} --> this root hooks path look like it may have hooks for our hook"
      for path_hook in ${path}/*; do
        if [ -f ${path_hook} ] && [ -x ${path_hook} ]; then
          # add a sorting prefix that will sort based on file prefix (the integer numbers) instead of the path
echo "VALID HOOK:${path_hook} --> "
        else
echo "INVALID HOOK :${path_hook} --> is not a file or is not executable"
        fi
      done
    else
echo "EMPTY HOOKS ROOT :${path} --> no matching hook folder found in this hooks root"
    fi
  done
}
