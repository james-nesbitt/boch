#!/bin/sh
#
# Hook related functionality
#

#
# Hooks
#
# Hooks are lists of function in particular paths, that are run in sequence
# in order to implement functionality.
#
# Hook Versions
#
# 1 : an inline script, without any _help or _execute methods
# 2 : a functional script with _help _description and _execute methods
#
# @TODO refactor to allow:
#   - allow hook exclusion

hooks_getpath()
{
  local library=""
  local path=""
  for library in `libraries_list`; do
    path="`library_path \"${library}\"`/hooks"
    if path_is --dir "${path}"; then
      echo "${path}"
    fi
  done
}

###
# Run hooks that can alter certain values
#
#
hooks_altervalue()
{
  local action="execute"

  # require the first argument to be the operation/name
  local name="${1}"
  shift
  local value="$@"
  local temp=""

  if [ -n "${name}" ]; then
    local hooks_paths="`hooks_list \"alter/${name}\"`"

    debug --level 8 --topic "HOOKS->ALTERVALUE" "hooks retrieved [name:${name}][hooks:${hooks_paths}]";
    local hook_path=""
    for hook_path in ${hooks_paths}; do

      debug --level 8 --topic "HOOKS->ALTERVALUE" "hook execution [action:${action}][hook_path:${hook_path}]";
      temp="`hook_execute \"$hook_path\" --action \"${action}\" ${value}`"

      if [ $? -gt 0 ]; then
        debug --level 7 --topic "HOOKS->ALTERVALUE" "Hook return an error during execution [name:${name}][path:${hook_path}][newvalue:${temp}]"
        return 1
      else
        debug --level 8 --topic "HOOKS->ALTERVALUE" "executed hook [name:${name}]: ${path_hook##*/}"
      fi

      if [ -n "${temp}" ]; then
        value="${temp}"
      fi
    done

    debug --level 8 --topic "HOOKS->ALTERVALUE" "Hooks execution finished [hook:${hook}]"
  fi

  echo "${value}"
  return 0
}

# Execute handler
hook_execute()
{
  if [ -z "${1}" ]; then
    # @NOTE I can't decide what the default behaviour should be
    # help_execute "hook:general"
    help_execute "hook:general"
  else
    case "${1}" in
      create)
        shift
        hook_create $@
        ;;
      *)
        help_execute "hook:${1}"
    esac
  fi
}

# handler for creating a hook (no messages)
hook_create()
{
  debug --level 9 --topic "HOOK->_CREATE" "hook_create"

  # default values
  local priority="500"
  local hook=""
  local name="empty_hook"
  local path="project~"
  local state=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -l|--library)
        path="${2}~"
        shift
        ;;
      -u|--user)
        path="user~"
        ;;

      -n|--name)
        name="${2}"
        shift
        ;;
      -r|--priority)
        priority="${2}"
        shift
        ;;
      -p|--path)
        path="$2"
        shift
        ;;
      -s|--state)
        state="${2}"
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  # Hook is the first argument
  hook="${1}"
  shift

  if [ -z "${hook}" ]; then
    return 1
  fi
  # add any state to the hook name
  if [ -n "${state}" ]; then
    hook="${hook}/${state}"
    name="${name}_${state}"
  fi

  path="`path_expand "${path}hooks/${hook}"`"
  path_ensure --dir "${path}"
  path="${path}/${priority}_${name}"

  if path_is "${path}"; then
    debug --level 4 --topic "HOOK->CREATE" "Path already exists, so hook was not created [path:${path}]"
  else
    if path_ensure --exec "${path}"; then
      echo "#!/bin/sh
#
# INIT:HOOK: Describe your hook
#
# @NOTE this hook will only execute if IT IS EXECUTABLE
# @NOTE that the file name used has the number prefix to sort
#     across all hooks that are in scope, across all folders
#

# Hook version is always 2, it tells the hook handler that
# you will have the description, help and execute methods
hook_version=2
# Hook root is the base of all function names in this hook
hook_root=\"${name}_${priority}\"

# Description method
#
# This description is used in help lists, when lists of hooks
# that affect a scope are shown.
${name}_${priority}_description()
{
  echo \"Provide a 1-line description of your hook\"
}

# help method
#
# Proovide full help text for the hook, including which arguments
# it may depend on
${name}_${priority}_help()
{
  echo \"HOOK->${name}->${priority} : Example hook help

Describe the hook here

  [-a|--argument {additional parameter} : describe what arguments
      the hook may act on

@NOTE add some useful notes

@TODO indicate what work still needs to be done
\"
}

# execute method
${name}_${priority}_execute()
{
  # replace these things:
  debug --level 3 --topic \"HOOK->${name}->${priority}\" \"Hook running in default state.[path:${path}]\"
  message \"Hook running in default state.  This hook was created using hook_create, but never modified.  Find this hook and make it do something [path:${path}]\"
}
" > ${path}
      message "New ${name} hook create for ${hook} [path:${path}]"
      debug --level 5 --topic "HOOK->CREATE" "Hook was created [path:${path}]"
    else
      debug --level 4 --topic "HOOK->CREATE" "Could not create hook file, so hook was not created [path:${path}]"
    fi
  fi
}


###
# Run hooks for an operation
#
# Conceptually, the function arguments determine
# a number of paths, and all function in those
# paths are executed
#
# $1 : operation
# -s|--state {state} : state e.g. pre or post
# $@ : passed to the hook functions
#
hooks_execute()
{
  # require the first argument to be the operation
  local hook="$1"
  shift

  # are we targeting a particular state
  local state=""
  # method to run (on v2 and later hooks)
  local action="execute"

  # base hooks path
  local paths=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -a|--action)
        action="${2}"
        shift
        ;;
      -s|--state)
        if [ "$2" != "execute" ]; then
          state="${2}"
        fi
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  if [ -n "${state}" ]; then
    local hooks_paths="`hooks_list  --state \"${state}\" \"${hook}\"`"
  else
    local hooks_paths="`hooks_list \"${hook}\"`"
  fi
  debug --level 8 --topic "HOOKS->EXECUTE" "hooks retrieved [hook:${hook}][state:${state}][hooks:${hooks_paths}]";
  local hook_path=""
  for hook_path in ${hooks_paths}; do

    debug --level 9 --topic "HOOKS->EXECUTE" "hook execution [hook:${hook}][state:${state}][hooks:${hooks_paths}]";
    _hook_execute $hook_path --action "${action}" $@

    if [ $? -gt 0 ]; then
      debug --level 7 --topic "HOOKS->EXECUTE" "Hook return an error during execution [hook:${hook}][path:${hook_path}]"
      return 1
    else
      debug --level 8 --topic "HOOKS->EXECUTE" "executed hook [hook:${hook}]: ${path_hook##*/}"
    fi
  done

  debug --level 8 --topic "HOOKS->EXECUTE" "Hooks execution finished [hook:${hook}]"
  return 0
}

# List all hooks, in the sorted order
hooks_list()
{
  local hook=""
  local suffix=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -s|--state)
        if [ "$2" != "execute" ]; then
          suffix="${suffix}/${2}"
        fi
        shift
        ;;
      *)
        break;; # terminate while loop
    esac
    shift
  done

  # first argument is the hook
  local hook="$1${suffix}"
  shift

  # print all of the functions that match our hook, in any of the avaiable hook paths, but sorted based on integer prefix
  local hooks_paths="`hooks_getpath`"
  local hook_token=""
  for hook_token in `for path in ${hooks_paths}; do
    path="${path}/${hook}"
    debug --level 9 --topic "HOOK->LIST" "Checking hook path [path:${path}]"
    if path_is --dir "${path}"; then
      for path_hook in ${path}/*; do
        if [ -f ${path_hook} ] && [ -x ${path_hook} ]; then
          # add a sorting prefix that will sort based on file prefix (the integer numbers) instead of the path
          echo "${path_hook##*/}:${path_hook}"
        fi
      done
    fi
  done | sort`; do
    # remove the sorting prefix
    echo "${hook_token##*:}"
  done
}

# include the hook source file (from full path)
hook_include()
{
  local hook="`path_expand "${1}"`"
  shift

  debug --level 9 --topic "HOOK->INCLUDE" "Hook include run : [hook:${hook}] : $@"
  if path_is --exec "${hook}"; then

    debug --level 9 --topic "HOOK->INCLUDE" "Including hook.  Handing off to path_include [hook:${hook}] ==> path_include \"${hook}\" $@ "
    path_include "${hook}" $@
    local success=$?
    if [ $success -eq 0 ]; then
      debug --level 8 --topic "HOOK->INCLUDE" "hook included \"${hook}\""
    else
      debug --level 4 --topic "HOOK->INCLUDE->FAIL" "hook include failed for \"${hook}\""
    fi

  else

    debug --level 7 --topic "HOOK->INCLUDE->FAIL" "Hook could not be included as it was not found, or is not a file [hook:${hook}]"

  fi

  return $sucess
}

# execute a hook method (must be loaded already)
_hook_execute()
{
  # hook path is the first param
  local path="$1"
  local hook="${path##*/}"
  shift

  debug --level 9 --topic "HOOK->EXECUTE" "hook_execute [hook:${path}]: START"

  # default action
  local action="execute"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -a|--action)
        action=$2
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  # clear out version and root vars so that the hook file can define them
  hook_version=""
  hook_root=""

  # include hook
  hook_include ${path}

  if [ $? -gt 0 ]; then
    debug --level 6 --topic "HOOK->EXECUTE" "this hook could not be included [hook:${path}]"
    return 1
  fi

  debug --level 8 --topic "HOOK->EXECUTE" "Included and Executing Hook script (source) [hook:${hook}][hook_root:${hook_root}][hook_version:${hook_version}][args:$@]"

  # if the hook source set a hook_version, then react to the version
  if [ -n "${hook_version}" ]; then
    case "$hook_version" in
      2)
        # version 2 hooks have methods named after the actions
        local hook_function="${hook_root}_${action}"
        debug --level 8 --topic "HOOK->EXECUTE" "Executing Hook script (source) [hook:${hook}][action:$action][hook_root:${hook_root}][hook_function:${hook_function}]: ${hook_function} $@"
        eval ${hook_function} $@

        if [ $? -gt 0 ]; then
          debug --level 6 --topic "HOOK->EXECUTE" "Hook script return an error [hook:${hook}][hook_function:${hook_function}]: ${hook_function} $@"
          return 1
        else
          debug --level 6 --topic "HOOK->EXECUTE" "Hook script executed [hook:${hook}][hook_function:${hook_function}][path:${hook}]: ${hook_function} $@"
          return 0
        fi
        ;;
      *)
        # older version hooks execute inline.  they have only the execute action.
        debug --level 6 --topic "HOOK->EXECUTE" "this hook source exists, but returned an unknown hook version.  No action was executed. [hook:${hook}][hook_version:${hook_function}]"
        return 0
        ;;
    esac
  else
    # older version hooks execute inline.  they have only the execute action.
    debug --level 6 --topic "HOOK->EXECUTE" "this hook source exists, but did not define any version.  No action was executed as we assume this an older version hookfile [hook:${hook}][hook_version:${hook_function}]"
    return 0
  fi
}

# create a usable short label for a hook
hook_label()
{
  echo "${1##*/}"
}
# print the path to the hook (remove the project path if it exists)
hook_path()
{
  echo "${1#${path_project}/}"
}
# print the path to the hook (remove the project path if it exists)
hook_helppath()
{
  echo "hook:`path_shorten ${1}`"
}

# show the description hook echo for a hook
hook_description()
{
  local hook=$1
  shift

  _hook_execute "${hook}" --action "description" $@
}

# List all hooks, not in the sorted order
# @NOTE as the hooks_list function is difficult to debug
#   this function does something similar and outputs hooks lists
hooks_list_debug()
{
  local hook=""
  local suffix=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -s|--state)
        suffix="${suffix}/${2}"
        shift
        ;;
      *)
        break;; # terminate while loop
    esac
    shift
  done

  # require the first argument to be the command
  local hook="$1${suffix}"
  shift

  # print all of the functions that match our hook, in any of the avaiable hook paths, but sorted based on integer prefix
  local hooks_paths="`hooks_getpath`"
  local hook_token=""
  for path in ${hooks_paths}; do
    path="${path}/${hook}"
    if [ -d ${path} ]; then
echo "CHECKING HOOKS ROOT :${path} --> this root hooks path looks like it may have hooks for our hook"
      for path_hook in ${path}/*; do
        if [ -f ${path_hook} ] && [ -x ${path_hook} ]; then
          # add a sorting prefix that will sort based on file prefix (the integer numbers) instead of the path
echo "VALID HOOK:${path_hook} --> "
        else
echo "INVALID HOOK :${path_hook} --> is not a file or is not executable"
        fi
      done
    else
echo "EMPTY HOOKS ROOT :${path} --> no matching hook folder found in this hooks root"
    fi
  done
}
