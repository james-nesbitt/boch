
DOCKER MANAGEMENT TOOLS

QUICK FAQ

WHAT IS THIS

This is a quick version of what vagrant is, but tailored for Docker

WHAT IS DOCKER

Docker is a Linux chroot library, that is ultra efficient, and uses some
fancy linix code to make really efficient isolated environments.

WHY NOT VIRTUALBOX

Well, if you're reading this on a Mac, then you'll need VBOX anyway, but
if not, here is a list of advantages:
- shared disk space for static components of your box
    e.g. all centos boxes use the same base layer of centos OS and userland
- nested images
    children images can all be based of various parents, and share customizations
    made to those containers
- separation of image and container
    - you can run multiple containers of the same image
- no need to rebuild

WHY NOT USE VAGRANT

That is probably a good idea, but there are a few things that this
toolset could eventually provide that VAGRANT cannot.
- versioning containers (snapshotss, reversion, forking)
- temporary containers (runn a self-destructing test containers
- provision rarely, share often
- separated provisioning (no need to reprovision adding php-fpm or nginx base)

HOW DO I USE THIS TOOL (HOW IS IT DIFFERENT FROM VAGRANT

1. you only need a small project specific provision/build ... kind of

Docker images are nested, and persistant, and can be the base for a container.
This means that if you build something generic. it can be used for all sorts
if children.  This means that provisioning can be separated into stages
THis is what our dev image parent does:

1: wwwserver
 - A centOS 65 image with nginx, php-fpm, mariaDB and sshd, that uses supervisor to manage servers
2: wwwserver-dev
 - the wwwserver image with a developer user added, git, drush, zsh and some other things,
   it also modifies some of the php settings for more verbosity, and adds xdebug,
   and adds specific .ssh credentials

3 project
 - a project specific image that puts site's nginx configuration into place, and adds
   a mariaDB database, and it adds the project source (1 time copy) into the build
   also drush aliases

The third image can be built on top the first (production) or the second (development)

2 Containers are based on the images

Any container that runs, will start with the image contents, and from there can be fleshed out
to add content, drush sql-sync etc.  A container can be temporary, but it can also be marked/commited
to a new version of the base image (and the name can be custom, or just the "latest"

A container is like a copy of what you have when you run vagrant up, after provisioning

3. Containers have a life of their own

Container can be:
- temporary and disappear after you shut them down
- marked as new base images, either as new versions or as the latest version of the image
