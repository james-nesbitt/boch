#!/bin/sh

#######################################
# some timing and debug related stuff #
#######################################

# Execution date & time (mainly used for logging)
date="`date +%F/%H:%m.%S`"
# Unique identifer of execution (random number)
#executionid="`echo ${date} | md5sum`"
executionid="${RANDOM}"

##################
# Common control #
##################

vflag=off
# DEBUG : default debugging level (3 gives some minimal output)
debug=${debug:-3}
# DEBUG : Logging level (same as debug, but for the log file)
log=${log:-0}

#####################
# Some reused paths #
#####################
#
# Feel free to change any of these paths
# but note that a lot of other paths may
# de based on them
#

# empty path text
empty_path="not found"

# Subpath of a root project folder, that contains project configuration
path_projectconf_subpath="${path_projectconf_subpath:-.boch}"
path_userconf_subpath="${path_userconf_subpath:-.boch}"

# path executed from
path_execution="${path_execution:-`pwd`}"
# path to user home folder (in case)
path_userhome="${path_userhome:-${HOME}}"
path_userconf="${path_userconf:-${path_userhome}/${path_userconf_subpath}}"

# Determine project root, and data paths
path_project="${path_execution}"
while [ -n "${path_project}" ] && [ "${path_project}" != "/" ]; do
  if [ "${path_project}" == "${path_userhome}" ]; then
    path_project="${empty_path}"
    path_projectconf="${empty_path}"
#     echo "INTERUPTING PATH DISCOVERY AT ROOT"
    break;
  fi
  if [ "${path_project}" == "${empty_path}" ]; then
    path_project="${empty_path}"
    path_projectconf="${empty_path}"
#     echo "INTERUPTING PATH DISCOVERY AT USER HOME"
    break;
  fi
  if [ -d "${path_project}/${path_projectconf_subpath}" ]; then
    path_projectconf="${path_project}/${path_projectconf_subpath}"
#     echo "DISCOVERED PATHS [project:${path_project}][conf:${path_projectconf}]"
    break
  fi
  path_project="$(dirname "${path_project}")"
done
# If we didn't find a project path, then take the EXEC path as the project path
if [ -z "${path_project}" ] || [ "${path_project}" == "${empty_path}" ]; then
  path_project="${path_execution}"
  # this data path will likely be empty, but this might be desirable for cases like flow init
  path_projectconf="not found"
#   echo "DEFAULT TO CURRENT PATHS [project:${path_project}][data:${path_projectconf}]"
fi

# this fixes a problem that occurs if you run boch inside the boch library folder
if [ "$path_projectconf" == "${path_library}" ]; then
#   echo "PROJECT CONF PATH MATCHES LIBRARY [library:${path_library}][data:${path_projectconf}]"
  path_projectconf="${empty_path}"
fi
# don't deal with the user conf folder if it does not exist
if [ ! -d "$path_userconf" ]; then
#   echo "USER CONF NOT FOUND, SO WE WILL NOT USE IT [user:${path_userconf}]"
  path_userconf="${empty_path}"
fi

# path to this library
if [ -z "${path_library}" ]; then
  if [ -d "${path_project}/manage" ]; then
    path_library="${path_project}/manage"
  else
    # This should be improved to automatically look at the executed
    # script.  It is currently not able to handle symlinks well.
    path_library="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
  fi
fi

# Include utility functions (including the debug function)
source "${path_library}/_utilities"
# Include library handling functions (including the library_load function)
source "${path_library}/_libraries"

if [ "${path_projectconf}" == "${empty_path}" ]; then
  debug --level 3 --topic "INIT" "NO PROJECT LIBRARY FOUND"
  message ">> You are currently operating boch outside of a project folder.  This makes sense if you have not yet run $/> boch flow init, but otherwise indicates that you may be in the wrong folder"
fi

# Include all of our source libraries
debug --level 7 --topic "INIT" "INCLUDING CORE SYSTEM LIBRARIES"

# include utility functions for running hooks (which every other library relies on)
library_load "hook"

# run init related hooks
hooks_execute "init" --state "pre"

# include the settings library (with a tool to load settings from other libraries)
library_load "settings"
# include help related functions (not debug, which is in utilities to get it loaded early.)
library_load "help"
# include docker functions - bash abstractions for docker operations
library_load "docker"

# run init related hooks
hooks_execute "init" --state "post"

debug --level 7 --topic "INIT" "INCLUDING LIBRARIES COMPLETE"
