#!/bin/sh
#
# Library handling
#

# default library path
path_libraries=${path_libraries:-"${path_manage}/libraries"}

libraries_addpath()
{
  path_libraries="${path_libraries} ${1}"
}

library_include()
{

  # empty defaults
  local library=""
  local component=""

  local path=""

  local path_library=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -c|--component)
	component=$2
	shift
	;;
      *)
	  break;; # terminate while loop
    esac
    shift
  done

  # library is the first thing loaded
  local library=$1
  shift

  local success=-1

  debug --level 9 --topic "LIBRARY->INCLUDE->CALL->${library}" "called with \"include_library $@\" [paths:${path_libraries}]"

  # LIBRARY
  case " $included_libraries " in
    *" ${library} "*)
      debug --level 7 --topic "LIBRARY->INCLUDE" "library already included! [library:${library}][included_libraries:${included_libraries}]"
      success=0
    ;;

    *)
      # start off no success
      success=-1

      # mark success to show that we didn't find the library
      success=-1
      for path_library in ${path_libraries}; do
	path="${path_library}/${library}"

	library_load --library ${library} --path "${path_library}/${library}" $@

	if [ $? -gt -1 ]; then
	  success=$?
	  break;
	fi

      done
    ;;
  esac

  # COMPONENT
  if [ "${component}" != "" ] && [ $success -eq 0 ]; then

    # check if already attempted to oad this library component (if not mark it as attempted)
    case " $included_libraries " in
      *" ${library}:${component} "*)
          # already included

	  debug --level 8 --topic "LIBRARY->INCLUDE->COMPONENT" "component already included [library:${library}][component:${component}][[included_library_components:${included_library_components}]"
	  success=0
	;;

      *)

	# mark success to show that we didn't find the library
	success=-1

	for path_library in ${path_libraries}; do
	  # get the library path
	  path="${path_library}/${library}"

	  # if the path is a directory then assume that the whole directory is the library root
	  # if the path is not a directory, then it is a simple library and can't have components

	  if [ -d ${path} ]; then

	    if [ -d "${path}/components" ]; then
	      # library has a subfolder for components
	      path="${path}/components"
	    fi
	    # add the component name to the path
	    path="${path}/${component}"

	    # try to load the component as a library
	    debug --level 8 --topic "LIBRARY->INCLUDE" "trying to load library component, handing off to library_load [library:${library}][component:${component}] =>  library_load --library \"${library}:${component}\" --path \"${path}\" $@"
	    library_load --library "${library}:${component}" --path "${path}" $@

	    if [ $? -gt -1 ]; then
	      success=$?
	      break
	    fi

	  fi
	done

	if [ $success -eq -1 ]; then
	  # library was not found
	  debug --level 6 --topic "LIBRARY->INCLUDE->COMPONENT" "library component not found [library:${library}][component:${component}]"
	  success=1
	fi

      ;;
    esac

  fi

  return $success
}

###
# load a library (or a component)
#

# Remember included libraries so we can prevent repeats
included_libraries=""
library_load()
{

  local library=""
  local path=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -l|--library)
	library=$2
	shift
	;;
      -p|--path)
	path=$2
	shift
	;;
      *)
	  break;; # terminate while loop
    esac
    shift
  done

  if [ -z ${library} ] || [ -z ${path} ]; then
    debug --level 6 --topic "LIBRARY->LOAD" "no library specified [library:${library}][path:${path}]!"
    return 1
  fi

  # check if already attempted to load this library (if not mark it as attempted)
  case " $included_libraries " in
    *" ${library} "*)
        debug --level 7 --topic "LIBRARY->LOAD" "library already include [library:${library}][included_libraries:${included_libraries}]"
        return 0
      ;;

    *)
      # add library
      included_libraries="${included_libraries} ${library}"

      # init var
      local root_path=""

      debug --level 8 --topic "LIBRARY->LOAD" "trying to include library [library:${library}][path:${path}]"

      if [ ! -e ${path} ]; then
	debug --level 8 --topic "LIBRARY->LOAD" "library root does not exist [library:${library}][path:${path}]"
	return 1
      fi

      # if the path is a directory then assume that the whole directory is the library root
      if [ -d ${path} ]; then
	debug --level 8 --topic "LIBRARY->LOAD" "using path as library directory.[path:${path}]"
	root_path="${path}/${library}"
      else
	root_path="${path}"
	debug --level 8 --topic "LIBRARY->LOAD" "loading simple library (this library can't have components.) [path:${path}]"
      fi

      if [ -f ${root_path} ] && [ -x ${root_path} ]; then

        _libraries_hooks_exists
	if [ $? -eq 0 ]; then
	  hooks_execute "library/load" --state "pre" --library ${library} --path ${path} $@
	fi

	debug --level 8 --topic "LIBRARY->LOAD" "Including library root.  Handing off to _include_source ==> _include_source \"${root_path}\" $@ "
	_include_source "${root_path}" $@

	if [ $? -eq 0 ]; then
	  _libraries_hooks_exists
	  if [ $? -eq 0 ]; then
	    hooks_execute "library/load" --state "post" --library ${library} --path ${path} $@
	  fi

	  debug --level 6 --topic "LIBRARY->LOAD" "library loaded [library:${library}][path:${path}]"
	  return 0
	else
	  debug --level 6 --topic "LIBRARY->LOAD" "library load failed  [library:{$library}][path:${path}]"

	  _libraries_hooks_exists
	  if [ $? -eq 0 ]; then
	    hooks_execute "library/load" --state "fail" --library ${library} --path ${path} $@
	  fi
	  return 1
	fi

      else
	debug --level 8 --topic "LIBRARY->LOAD" "library root handler does not exist or is not executable for \"${path}\""
	return 1
      fi
    ;;
  esac
}

# has hooks been loaded yet?
_libraries_hooks_exist=1
_libraries_hooks_exists()
{
  if [ $_libraries_hooks_exist -eq 1 ]; then
    declare -f -F hooks_execute > /dev/null
    _libraries_hooks_exist=$?
  fi
  return $_libraries_hooks_exist
}

library_execute()
{

  # empty defaults
  local library=""
  local component=""
  local action="execute"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -a|--action)
	action=$2
	shift
	;;
      -c|--component)
	component=$2
	shift
	;;
      *)
	  break;; # terminate while loop
    esac
    shift
  done

  # library is the first thing loaded
  local library=$1
  shift

  local success=-1

  # include the library
  if [ "${component}" == "" ]; then
    library_include "${library}" $@
    success=$?

    # generate the library method
    library_function="${library##*:}_${action}"
  else
    library_include --component "${component}" "${library}" $@
    success=$?

    # generate the library method
    library_function="${component##*:}_${action}"
  fi

  if [ $success -eq 0 ]; then

    debug --level 7 --topic "LIBRARY->EXECUTE" "library [library:${library}][component:${component}] handing off to library script : ${library_function} $@"
    eval ${library_function} $@
    success=$?
    if [ $success == 0 ]; then
      echo "$result"
      debug --level 8 --topic "LIBRARY->EXECUTE" "Library execute succeeded [library:${library}][component:${component}][action:${action}]."

    else
      debug --level 6 --topic "LIBRARY->EXECUTE" "Command execution failed for library [library:${library}][component:${component}][action:${action}].  Command method returned an error"
    fi
    return $sucess

  else
    debug --level 6 --topic "LIBRARY->EXECUTE" "Command execution failed for library [library:${library}][component:${component}][action:${action}].  Could not find library or component"
    return 1
  fi
}

