#!/bin/sh
#
# Library handling
#

# register a library with the system
# @NOTE don't use this, as all it does is rememeber the path
_libraries_addlibrary()
{
  list_add "libraries_loaded" "${1}"
}
# add the core manage folder as a library, even though it isn't really a library
# this just makes some things easier
_libraries_addlibrary "core:${path_manage}/libraries"

# return list of paths to libraries containing a folder/subpath
# @NOTE return paths are to the subfolder
libraries_list_subpath()
{
  local subpath="$1"

  local library_path=""
  local path=""
  for library_path in `libraries_list`; do
    path="${library_path##*:}/${subpath}"
    if [ -d "${path}" ]; then
      echo "${path}"
    fi
  done
}

# retrieve the list of loaded libraries
libraries_list()
{
  list_get "libraries_loaded"
}
# get the list record for a specific library from the loaded list
libraries_list_get()
{
  local target="${1}"

  local library=""
  for library in `libraries_list`; do
    if [ "${target}" == "${library%:*}" ]; then
      echo "${library}"
      return 0
    fi
  done
  return 1
}

# library path retrieval
# @NOTE you can pass in the name of the library, or the library list record
library_path()
{
  local library="${1}"

  if [ "${library}" == "${library%:*}" ]; then
    library="`libraries_list_get \"${library}\"`"
    if [ $? -gt 0 ]; then
      return 1
    fi
  fi

  echo "${library##*:}"
}

# this is a safe hooks executor, for handling cases where the hooks library has not been loaded yet.
# this is necessary for the case of loading the hooks library, and any libraries before that.
_libraries_hooks_execute()
{
  function_exists "hooks_execute"
  if [ $? -eq 0 ]; then
    hooks_execute $@
  fi
}

# public handler for loading a library
library_load()
{
  local library=""
  local component=""
  local path=""
  local subpath=""
  local corefile=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -c|--component)
        component="${2}"
        shift
        ;;
      -f|--corefile)
        # if a component is passed, then this path os for the component
        # @NOTE Only used if the library is a directory
        corefile="$2"
        shift
        ;;
      -p|--path)
        # if a component is passed, then this path os for the component
        path="$2"
        shift
        ;;
      -s|--subpath)
        # component subpath folder (only used if --component is passed)
        subpath="$2"
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  local library="${1}"
  shift

  local success=-1

  library_loaded "${library}"
  success=$?
  if [ $success -eq 0 ]; then
    # library is already loaded
    debug --level 6 --topic "LIBRARY->LOAD" "library already loaded [library:${library}]"
    success=0
  else

    if [ -z "${component}" ] && [ -n "${path}" ]; then

      path_exists --type "library" "${path}"
      success=$?
      if [ $success -eq 0 ]; then
        _library_load --library "${library}" --path "${path}" --corefile "${corefile}"
        success=$?
        if [ $success -eq 0 ]; then
          debug --level 6 --topic "LIBRARY->LOAD" "suggested path library loaded [library:${library}][path:${path}][corefile:${corefile}][success:${success}]"
        else
          debug --level 6 --topic "LIBRARY->LOAD" "suggested path library load failed [library:${library}][path:${path}][corefile:${corefile}][success:${success}]"
        fi
      else
        debug --level 6 --topic "LIBRARY->LOAD" "suggested path for library not found, or not a library [library:${library}][path:${path}][corefile:${corefile}][success:${success}]"
      fi

    else

      local path_library=""
      for path_library in `libraries_list`
      do
        path="`library_path "${path_library}"`/${library}"

        if path_is --type "library" "${path}"; then
          debug --level 9 --topic "LIBRARY->LOAD" "library exists [library:${library}][path:${path}][success:${success}]"
          _library_load --library "${library}" --path "${path}"
          success=$?
          if [ $success -eq 0 ]; then
            debug --level 5 --topic "LIBRARY->LOAD" "library found and loaded [library:${library}][path:${path}][corefile:${corefile}][success:${success}]"
          else
            debug --level 5 --topic "LIBRARY->LOAD" "library found but load failed [library:${library}][path:${path}][corefile:${corefile}][success:${success}]"
          fi

          break
        else
          success=1
          debug --level 7 --topic "LIBRARY->LOAD" "library path does not exist [library:${library}][path:${path}][success:${success}]"
        fi
      done

      if [ $success -lt 0 ]; then
        debug --level 6 --topic "LIBRARY->LOAD" "library could not be found [library:${library}][path:${path}][corefile:${corefile}][success:${success}]"
        success=1
      fi
    fi

  fi

  if [ $success -eq 0 ] && [ -n "${component}" ]; then

    if [ -n "${path}" ]; then
      path_is --type "library" "${path}"
      if [ $? -eq 0 ]; then
        _library_load --library "${component}" --path "${path}" --corefile "${corefile}"
        local success=$?
        if [ $success -eq 0 ]; then
          debug --level 7 --topic "LIBRARIES->COMPONENT->LOAD" "Library component loaded [library:${library}][component:${component}]"
        else
          debug --level 6 --topic "LIBRARIES->COMPONENT->LOAD" "Library component loading failed [library:${library}][component:${component}][success:${success}]"
        fi
        return $success
      else
        debug --level 5 --topic "LIBRARIES->COMPONENT->LOAD" "Library component could not be found, it does not exists or was not a library [library:${library}][component:${component}][given path:${path}]"
        return 1
      fi
    else
      # if no subpath was passed in, the fake a plural of the library name
      if [ -z "${subpath}" ]; then
        subpath="${component}s"
      fi

      for library in `libraries_list`; do
        component_contents_path="`library_path \"${library}\"`/${subpath}/${component}"
        path_is --type "library" "${path}"
        if [ $? -eq 0 ]; then
          _library_load --library "${component}" --path "${path}" --corefile "${corefile}"
          if [ $? -eq 0 ]; then
            debug --level 7 --topic "LIBRARIES->COMPONENT->LOAD" "Library component loaded [library:${library}][component:${component}]"
          else
            debug --level 6 --topic "LIBRARIES->COMPONENT->LOAD" "Library component loading failed [library:${library}][component:${component}]"
          fi
        fi
      done

      debug --level 5 --topic "LIBRARIES->COMPONENT->LOAD" "Library component could not be found [library:${library}][component:${component}]"
      return 1
    fi

  fi

  return $success
}
# internal handler for actually loading a library
#
# -l|--library {library} : the library name, which is used to track loading
# -p|--path {path} : path to the library (folder, in for a simple library, the executable file)
# [-f|--corefile {corefile}] : optional alternative core file for a folder library
#
# @NOTE this doesn't care if it is a library, component
#       but it is responsible for checking if it is a
#       simple or directory library, loading the core
_library_load()
{
  local library=""
  local path=""
  local corefile=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -f|--corefile)
        # @NOTE Only used if the library is a directory
        corefile="$2"
        shift
        ;;
      -l|--library)
        library="$2"
        shift
        ;;
      -p|--path)
        path="$2"
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  if path_is --type "library" "${path}"; then
    local path_include="${path}"

    if path_is --type "directory" "${path}"; then
      if [ -z "${corefile}" ]; then
        corefile="${path##*/}"
        debug --level 8 --topic "LIBRARY->_LOAD" "library is a directory based lib. No corefile suggested, so auto-determining it [library:${library}][path:${path}][corefile:${corefile}]"
      else
        debug --level 8 --topic "LIBRARY->_LOAD" "library is a directory based lib. Corefile suggested [library:${library}][path:${path}][corefile:${corefile}]"
      fi
      path_include="${path}/${corefile}"
    else
        debug --level 8 --topic "LIBRARY->_LOAD" "library is a simple library (this library can't have components or includes.) [path:${path}]"
    fi

    # register the library as a path
    list_add "libraries_loaded" "${library}:${path}"

    # run pre hooks
    _libraries_hooks_execute "library/load" --state "pre" --library "${library}" --path "${path}" $@

    debug --level 7 --topic "LIBRARY->_LOAD" "Including library root.  Handing off to path_include ==> path_include \"${path_include}\" $@ "
    if path_include "${path_include}" $@; then
      # run post hooks
      _libraries_hooks_execute "library/load" --state "post" --library "${library}" --path "${path}" $@

      debug --level 6 --topic "LIBRARY->_LOAD" "library loaded [library:${library}][path:${path}]"
      return 0
    else
      debug --level 6 --topic "LIBRARY->_LOAD" "library load failed  [library:${library}][path:${path}][success:${success}]"
      # run fail hooks
      _libraries_hooks_execute "library/load" --state "fail" --library ${library} --path ${path} $@
      return 1
    fi

  fi

  debug --level 7 --topic "LIBRARY->_LOAD" "library root does not exist, or is not executable, it cannot be loaded [library:${library}][path:${path}]"
  return 1
}
# Include a file in a library root
library_include()
{
echo "LIBRARY_INCLUDE"
}
# Execute a library handler function
# @NOTE this function tries to make sure that hte library is loaded
#       and it is component aware.
library_execute()
{
  # empty defaults
  local library=""
  local component=""
  local action="execute"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -a|--action)
        action=$2
        shift
        ;;
      -c|--component)
        component=$2
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  # library is the first thing loaded
  local library=$1
  shift

  # include the library
  if [ -z "${component}" ]; then
    library_load "${library}" $@
    success=$?
    if [ $success -eq 0 ]; then
      _library_execute --action "${action}" "${library}"
    fi
  else
    library_load --component "${component}" "${library}" $@
    success=$?
    if [ $success -eq 0 ]; then
      _library_execute --component "${component}" --action "${action}" "${library}"
    fi
  fi

  return $?
}
# Execute internal handler
# @NOTE this is used in the _libraries handler for cases where we don't need
#       to worry about loading the library, or handling components.
_library_execute()
{
  # empty defaults
  local library=""
  local component=""
  local action="execute"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -a|--action)
        action=$2
        shift
        ;;
      -c|--component)
        component=$2
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  # library is the first thing loaded
  local library=$1
  shift

  # include the library
  if [ -z "${component}" ]; then
    library_load "${library}" $@
    success=$?
    library_function="${library}_${action}"
  else
    library_load --component "${component}" "${library}" $@
    success=$?
    library_function="${component}_${action}"
    debug --level 8 --topic "LIBRARY->_EXECUTE" "library execute is for a component [library:${library}][action:${action}][function:${library_function}]"
  fi

  function_exists "${library_function}"
  if [ $? -eq 0 ]; then
    debug --level 8 --topic "LIBRARY->_EXECUTE" "Handing off to library function [library:${library}][action:${action}] : ${library_function} $@"
    eval ${library_function} $@
    success=$?
    if [ $success -eq 0 ]; then
      debug --level 7 --topic "LIBRARY->_EXECUTE" "Library execute succeeded [library:${library}][action:${action}]."
    else
      debug --level 5 --topic "LIBRARY->_EXECUTE" "Command execution failed for library, command method returned an error [library:${library}][component:${component}][action:${action}][success:${success}]"
    fi
    return $sucess
  else
    debug --level 7 --topic "LIBRARY->_EXECUTE" "Library execute method was not found in the library [library:${library}][action:${action}]."
    return 1
  fi
}

# list all contents of a subpath in any library
# @NOTE this is used for components and hooks, which can exist in
#       any library.
libraries_subpath_list()
{
  local subpath="$1"
  local type="exec"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -d|--directory)
        type="dir"
        ;;
      -f|--file)
        type="file"
        ;;
      -l|--library)
        type="library"
        ;;
      -x|--executable)
        type="exec"
        ;;
      -t|--type)
        type="${2}"
        shift
        ;;
      *)
        break;
    esac
    shift
  done

  local library=""
  local library_path=""
  local library_path_contents=""
  for library in `libraries_list`; do
    library_path="`library_path \"${library}\"`'"
    for library_path_contents in `path_contents --type \"${type}\" \"${library_path}\"`; do
      echo "${content_path##*/}:${content_path}"
    done
  done
}

# boolean responder for if a library is loaded
# returns 0 for loaded, 1 for not loaded
library_loaded()
{
  case " `libraries_list`" in
    *" ${library}:"*)
        return 0
      ;;
    *)
      return 1
      ;;
  esac
}
