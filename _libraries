#!/bin/sh
#
# Library handling
#

# register a library with the system
# @NOTE don't use this, as all it does is rememeber the path
_libraries_addlibrary()
{
  list_add "libraries_loaded" "${1}"
}
libraries_getlibraries()
{
  list_get "libraries_loaded"
}

library_include()
{

  # empty defaults
  local library=""
  local component=""

  local path=""

  local path_library=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -c|--component)
        component="$2"
        shift
        ;;
      -p|--path)
        path="$2"
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  # library is the first thing loaded
  local library=$1
  shift

  local success=-1

  # LIBRARY
  case " `libraries_getlibraries` " in
    *" ${library} "*)
      debug --level 7 --topic "LIBRARY->INCLUDE" "library already included! [library:${library}][included_libraries:`libraries_getlibraries`]"
      success=0
    ;;

    *)

      # if no path was sent in, then we will try to search for it.
      if [ -z "${path}" ]; then

        # mark success to show that we didn't find the library
        success=-1

        local path_libraries="`libraries_getlibraries` core:${path_manage}"
        debug --level 8 --topic "LIBRARY->INCLUDE" "library include! [library:${library}][included_libraries:${path_libraries}]"
        for path_library in ${path_libraries}; do
          path="${path_library##*:}/libraries/${library}"

          # check the path before trying to load it
          if [ -e ${path} ]; then
            debug --level 8 --topic "LIBRARY->INCLUDE" "trying to load library, handing off to library_load [library:${library}] =>  library_load --library \"${library}\" --path \"${path}\" $@"
            library_load --library "${library}" --path "${path}" $@

            if [ $? -gt -1 ]; then
              success=$?
              break;
            fi
          fi
        done

      # if not path was provided, then search for the library
      else

        # check the path before trying to load it
        if [ -e ${path} ]; then
          debug --level 8 --topic "LIBRARY->INCLUDE" "trying to load library, handing off to library_load [library:${library}] =>  library_load --library \"${library}\" --path \"${path}\" $@"
          library_load --library "${library}" --path "${path}" $@

          success=$?
        fi

      fi
    ;;
  esac

  # COMPONENT
  if [ -n "${component}" ] && [ $success -eq 0 ]; then

    # check if already attempted to oad this library component (if not mark it as attempted)
    case " `libraries_getlibraries` " in
      *" ${library}:${component} "*)
          # already included

          debug --level 3 --topic "LIBRARY->INCLUDE->COMPONENT" "component already included! [library:${library}][component:${component}][[included_library_components:`libraries_getlibraries`]"
          success=0
        ;;

      *)

        # mark success to show that we didn't find the library
        success=-1

        # if a component is of the form {parent}:{name} then split them, otherwise assume name={library}
        # path will be {library}/{parent}/{name}
        local component_parent="${component%:*}"
        if [ -z ${component_parent} ]; then
          component_parent=${component_parent:-${library}}
        fi
        local component_name="${component##*:}"
        for path_library in `libraries_getlibraries`; do
          # get the library path (libraries_getlibraries returns key:path pairs)
          path="${path_library##*:}/${component_parent}/${component_name}"

          # do a quick check on the path to save time
          if [ -e ${path} ]; then
            # try to load the component as a library
            debug --level 8 --topic "LIBRARY->INCLUDE->COMPONENT" "trying to load library component, handing off to library_load [library:${library}][component:${component_nme}] =>  library_load --library \"${library}:${component}\" --path \"${path}\" $@"
            library_load --library "${library}_${component}" --path "${path}" $@
            success=$?

            # if we found it then break (make a library_load return -1 to keep looking)
            if [ $success -gt -1 ]; then
              break
            fi

          fi

        done

        if [ $success -eq -1 ]; then
          # library was not found
          debug --level 6 --topic "LIBRARY->INCLUDE->COMPONENT" "library component not found [library:${library}][component:${component}]"
          success=1
        fi

      ;;
    esac

  fi

  return $success
}

###
# load a library (or a component)
#

# Remember included libraries so we can prevent repeats
included_libraries=""
library_load()
{

  local library=""
  local path=""
  local corefile=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -c|--core)
        corefile="$2"
        shift
        ;;
      -l|--library)
        library="$2"
        shift
        ;;
      -p|--path)
        path="$2"
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  if [ -z "${library}" ] || [ -z "${path}" ]; then
    debug --level 6 --topic "LIBRARY->LOAD" "no library or library path specified [library:${library}][path:${path}][core file:${corefile}]"
    return 1
  fi
  if [ -z "${corefile}" ]; then
    corefile="${library##*:}"
  fi

  # check if already attempted to load this library (if not mark it as attempted)
  case " `libraries_getlibraries`" in
    *" ${library}:"*)
        debug --level 6 --topic "LIBRARY->LOAD" "library already included [library:${library}][included_libraries:`libraries_getlibraries`]"
        return 0
      ;;

    *)

      # init var
      local root_path=""

      debug --level 8 --topic "LIBRARY->LOAD" "trying to include library [library:${library}][path:${path}]"

      if [ ! -e ${path} ]; then
        debug --level 8 --topic "LIBRARY->LOAD" "library root does not exist [library:${library}][path:${path}]"
        return 1
      fi

      # if the path is a directory then assume that the whole directory is the library root
      if [ -d ${path} ]; then
        root_path="${path}/${corefile}"
        debug --level 8 --topic "LIBRARY->LOAD" "using path as library directory.[path:${root_path}]"
      else
        root_path="${path}"
        debug --level 8 --topic "LIBRARY->LOAD" "loading simple library (this library can't have components.) [path:${root_path}]"
      fi

      if [ -f ${root_path} ] && [ -x ${root_path} ]; then

        # register the library as a path
        _libraries_addlibrary "${library}:${path}"

        # run pre hooks
        _libraries_hooks_execute "library/load" --state "pre" --library ${library} --path ${path} $@

        debug --level 8 --topic "LIBRARY->LOAD" "Including library root.  Handing off to _include_source ==> _include_source \"${root_path}\" $@ "

        _include_source "${root_path}" $@
        local success=$?

        if [ $success -eq 0 ] || [ $success -eq 255 ]; then
          # run post hooks
          _libraries_hooks_execute "library/load" --state "post" --library ${library} --path ${path} $@

          debug --level 6 --topic "LIBRARY->LOAD" "library loaded [library:${library}][path:${path}]"
          return 0
        else
          debug --level 5 --topic "LIBRARY->LOAD" "library load failed  [library:${library}][path:${path}][success:${success}]"
          # run fail hooks
          _libraries_hooks_execute "library/load" --state "fail" --library ${library} --path ${path} $@
          return 1
        fi

      else
        debug --level 5 --topic "LIBRARY->LOAD" "library root handler does not exist or is not executable for \"${root_path}\""
        return 1
      fi
    ;;
  esac
}

# this is a safe hooks executor, for handling cases where the hooks library has not been loaded yet.
_libraries_hooks_execute()
{
  declare -f -F hooks_execute > /dev/null
  if [ $? -eq 0 ]; then
    hooks_execute $@
  fi
}

library_execute()
{

  # empty defaults
  local library=""
  local component=""
  local action="execute"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -a|--action)
        action=$2
        shift
        ;;
      -c|--component)
        component=$2
        shift
        ;;
      *)
          break;; # terminate while loop
    esac
    shift
  done

  # library is the first thing loaded
  local library=$1
  shift

  local success=-1

  # include the library
  if [ "${component}" == "" ]; then
    library_include "${library}" $@
    success=$?

    # generate the library method
    library_function="${library##*:}_${action}"
  else
    library_include --component "${component}" "${library}" $@
    success=$?

    # generate the library method
    library_function="${component##*:}_${action}"
  fi

  if [ $success -eq 0 ]; then

    debug --level 7 --topic "LIBRARY->EXECUTE" "library [library:${library}][component:${component}] handing off to library script : ${library_function} $@"
    eval ${library_function} $@
    success=$?
    if [ $success == 0 ]; then
      echo "$result"
      debug --level 8 --topic "LIBRARY->EXECUTE" "Library execute succeeded [library:${library}][component:${component}][action:${action}]."

    else
      debug --level 5 --topic "LIBRARY->EXECUTE" "Command execution failed for library [library:${library}][component:${component}][action:${action}].  Command method returned an error"
    fi
    return $sucess

  else
    debug --level 5 --topic "LIBRARY->EXECUTE" "Command execution failed for library [library:${library}][component:${component}][action:${action}].  Could not find library or component"
    return 1
  fi
}

# return list of paths to libraries containing a folder/subpath
# @NOTE return paths are to the subfolder
libraries_list_subpath()
{
  local subpath="$1"

  local library_path=""
  local path=""
  for library_path in `libraries_getlibraries`; do
    path="${library_path##*:}/${subpath}"
    if [ -d "${path}" ]; then
      echo "${path}"
    fi
  done
}

# list all existing components of a type
libraries_list_components()
{
  local subpath="$1"

  local components_path=""
  local component_path=""
  for components_path in `libraries_list_subpath $subpath`; do
    for component_path in ${components_path}/*; do
      if [ -d "${component_path}" ] || [ -x "${component_path}" ]; then
        echo "${component_path##*/}:${component_path}"
      fi
    done
  done
}
