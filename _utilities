#!/bin/sh
#
# Utility functions
#

###
# list handling
#
#
#
_list_rootvar=""
list_reset()
{
  local name=$1

  local var="${_list_rootvar}${name}"
  eval "$var=\"\""
  debug --level 9 --topic "UTIITY->LIST->RESET" "Resetting lists var [list:${var}][value:${!var}]"
}
list_add()
{
  local name=$1
  local item=$2

  local var="${_list_rootvar}${name}"
  local value="${!var}"
  case " ${!var} " in
    *" ${item} "*)
      # item is already in the list
      return 0
  esac

  value="${item} ${value}"
  value=${value%% }
  value=${value## }
  eval "$var=\"${value}\""
  debug --level 8 --topic "UTIITY->LIST->ADD" "Adding list to lists var [list:${var}][value:${!var}][added:${list}]"
}
list_get()
{
  local name=$1

  local var="${_list_rootvar}${name}"
  local trimmed="${!var}"
  trimmed=${trimmed%% }
  trimmed=${trimmed## }
  echo "${trimmed}"
  debug --level 9 --topic "UTIITY->LIST->GET" "get lists var [list:${var}][value:${trimmed}]"
}

#########################
# Handle debug messages #
#########################
#
# -t|--topic {topic} : string grouping topic
# -l|--level [{level}] : optional specific verbosity level 1-10
#       verbosity level (off the top of my head):
#        1 : critical - EXECUTION WILL STOP
#        2 : Serious error in abstraction
#        3 : error (will print without debug turned on)
#        4 : Important implementation notification/failure
#        5 : Standard implementation information (standard log message)
#        6 : Extra implementation information, like success messages
#        7 : superfluous info (running hooks)
#        8 : Top detail, that is safe to echo
#        9 : tiny detail, output may actually break the implementation!
#

# path to the log file
path_log="${path_log:-"${path_data}/log"}"

#set an execution threshold.  Anything -le will stop execution flow.
debug_critical_level=${_debug_critical_level:-1}
# DEBUG : output debugging text
debug=${debug:-3}
# DEBUG : Logging level
log=${log:-0}

# Set the debugging level
debug_set_level()
{
  debug=${1}
  shift
  debug --level 3 --topic "UTILITY->DEBUG" "Debug mode enabled/set (level:${debug}) $@"
}
# set the debug logging value
debug_set_log()
{
  log=${1}
  shift
  debug --level 3 --topic "UTILITY->DEBUG" "Logging mode enabled/set (level:${log}) $@"
}
# disable the "execution stop on critical" feature in debug()
debug_disable_critical()
{
  debug_critical_level=${1:--1}
  debug --level 3 --topic "UTILITY->DEBUG" "Forced mode enabled $@"
}

# Create a debug entry/message
debug()
{

  # 0= not critical, 1= critical - execution will stop
  local critical=0

  # default organization config
  local level=5
  local topic="GENERAL"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -l|--level)
        level=${2}
        shift
        ;;
      -t|--topic)
        topic="${2}:"
        shift
        ;;
      *)
        break;
    esac
    shift
  done

  if [ ${level} -le ${debug_critical_level} ]; then
    critical=1
  fi

  if [ ${level} -le ${debug} ]; then
    echo "[${level}]${topic} $@"
    if [ ${critical} -gt 0 ]; then
      echo "STOPPING EXECUTION DUE TO CRITICAL NOTICE"
    fi
  fi
  if [ ${level} -le ${log} ]; then
    echo "${executionid} ${date} : [${level}]${topic} $@" >> ${path_log}
    if [ ${critical} -gt 0 ]; then
      echo "STOPPING EXECUTION DUE TO CRITICAL NOTICE" >> ${path_log}
    fi
  fi

  if [ ${critical} -gt 0 ]; then
    exit 1
  fi
}

# run some initial debug statements depending on debug state
#
# We do some testing on the debug state, purely so that we can
# make some initial debugging output.  We do it here, as it is
# the earliest that we can,
#
if [ $debug -gt 3 ]; then
  debug_set_level $debug
fi
if [ $log -gt 0 ]; then
  debug_set_log $log
fi
if [ $debug_critical_level -lt 1 ]; then
  debug_disable_critical
fi

###
# source/include scripts
#
# an abstract function to include as a source, a script
# plus a few specific implementations that use the abstract
# function
#

# try to shorten paths by replacing library paths
path_shorten()
{
  local path="${1}"

  local library=""
  for library in `libraries_getlibraries`; do
    case "${path}" in
      *"${library##*:}"*)
        echo "${library%:*}~${path#${library##*:}/}"
        return 0
        ;;
    esac
  done

  case "${path}" in
    *"${path_data}"*)
      echo "project~${path#${path_data}/}"
      return 0
      ;;
    *"${path_manage}"*)
      echo "manage~${path#${path_manage}/}"
      return 0
      ;;
    *"${path_project}"*)
      echo "root~${path#${path_project}/}"
      return 0
      ;;
    *"${path_userhome}"*)
      echo "user~${path#${path_userhome}/}"
      return 0
      ;;
  esac

  echo "${path}"
  return 0
}
# reverse the path_shorten process
path_expand()
{
  local path=${1};

  if [ "${path}" != "${path#*~}" ]; then

    case "${path}" in
      *"root~"*)
        echo "${path_project}/${path#project~}"
        ;;
      *"data~"*)
        echo "${path_data}/${path#data~}"
        ;;
      *"manage~"*)
        echo "${path_manage}/${path#manage~}"
        ;;
      *"user~"*)
        echo "${path_userhome}/${path#user~}"
        ;;
      *)
        local library=""
        for library in `libraries_getlibraries`; do
          case "${path}" in
            *"${library%:*}~"*)
              #This can cause problems if debugging is enabled: library_include "${library%:*}"
              echo "${library##*:}/${path#${library%:*}~}"
              return 0
              ;;
          esac
        done
        ;;
    esac

  fi

  echo "${path}"
}

path_exists()
{
  local type="any"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -d|--directory)
        type="dir"
        shift
        ;;
      -f|--file)
        type="file"
        shift
        ;;
      -x|--executable)
        type="exec"
        shift
        ;;
      *)
        break;
    esac
    shift
  done

  local path="`path_expand ${1}`"
  shift

  case "${type}" in
    "file")
      if [ -f "${file}" ]; then
        return 0
      else
        return 1
      fi
      ;;
    "dir")
      if [ -d "${file}" ]; then
        return 0
      else
        return 1
      fi
      ;;
    "exec")
      if [ -f "${file}" ] && [ -x "${file}" ]; then
        return 0
      else
        return 1
      fi
      ;;
    *)
      if [ -e "${file}" ]; then
        return 0
      else
        return 1
      fi
      ;;
  esac
}
#
# Include a file using source
#
# $1 : path to target to include
# $@ : additional arguments to pass to source command
#
_include_source()
{
  local target="`path_expand \"$1\"`"
  shift

  if [ -f ${target} ]; then
    debug --level 8 --topic "UTILITY->INCLUDE" "_include_source [target:${target}] : Including source item"
    source ${target} $@
    return $?
  else
    debug --level 6 --topic "UTILITY->INCLUDE" "_include_source [target:${target}] : Could not include source item.  Item was not found, or is not a file"
    return 1
  fi
}

####
# File and folder functions
#
# Various operations in the system require a path or file
# exist.  These two functions will create the path or
# return an error if they can't
#

# Create an empty folder, if it doesn't already exist
#
# $1 : folder path
#
ensure_folder()
{
  # Take the path from the first argument
  local path=$1
  debug --level 9 --topic "UTILITY->FILEFOLDER->FILE->FOLDER" "ensure_folder [path:$path]"

  if [ -e $path ]; then
    if [ -f $path ]; then
      debug --level 6 --topic "UTILITY->FILEFOLDER->FILE->FOLDER" "could not create folder.  Already exists but not as a directory [path:$path]"
      return 1
    else
      debug --level 8 --topic "UTILITY->FILEFOLDER->FILE->FOLDER" "folder already exists. No need to create it [path:$path]"
      return 0
    fi
  else
    debug --level 8 --topic "UTILITY->FILEFOLDER->FILE->FOLDER" "creating missing folder [path:$path]"
    mkdir -p ${path}
    local success=$?
    if [ $success -gt 0 ]; then
      debug --level 6 --topic "UTILITY->FILEFOLDER->FILE->FOLDER" "could not create folder [path:$path]"
    fi
    return $success
  fi
}

# Create an empty file, if it doesn't already exist
#
# $1 : file path
#
ensure_file()
{
  # Take the path from the first argument
  local path=$1
  debug --level 9 --topic "UTILITY->FILEFOLDER->FILE" "ensure_file [path:$path]"

  if [ -e $path ]; then
    if [ -d $path ]; then
      debug --level 6 --topic "UTILITY->FILEFOLDER->FILE" "could not create file.  Already exists but as a directory [path:$path]"
      return 1
    else
      debug --level 8 --topic "UTILITY->FILEFOLDER->FILE" "file already exists, no need to create it [path:$path]"
       return 0
    fi
  else
    debug --level 8 --topic "UTILITY->FILEFOLDER->FILE" "creating missing file [path:$path]"
    touch "${path}"

    local success=$?
    if [ $success -gt 0 ]; then
      debug --level 6 --topic "UTILITY->FILEFOLDER->FILE" "could not create file [path:$path]"
    fi
    return $success
  fi
}
