#!/bin/sh
#
# Utility functions
#

###
# list handling
#
#
#
_list_rootvar=""
list_reset()
{
  local name=$1

  local var="${_list_rootvar}${name}"
  eval "$var=\"\""
  debug --level 9 --topic "UTIITY->LIST->RESET" "Resetting lists var [list:${var}][value:${!var}]"
}
list_add()
{
  local name=$1
  local item=$2

  local var="${_list_rootvar}${name}"
  local value="${!var}"
  case " ${!var} " in
    *" ${item} "*)
      # item is already in the list
      return 0
  esac

  value="${item} ${value}"
  value=${value%% }
  value=${value## }
  eval "$var=\"${value}\""
  debug --level 8 --topic "UTIITY->LIST->ADD" "Adding list to lists var [list:${var}][value:${!var}][added:${item}]"
}
list_remove()
{
echo "@TODO Remove item from list"
}
list_replace()
{
echo "@TODO Replace old item with new item in list"
}
list_get()
{
  local name=$1

  local var="${_list_rootvar}${name}"
  local trimmed="${!var}"
  trimmed=${trimmed%% }
  trimmed=${trimmed## }
  local value=""
  for value in ${trimmed}; do
    echo "${value}"
  done
  debug --level 9 --topic "UTIITY->LIST->GET" "get lists var [list:${var}][value:${trimmed}]"
}

#########################
# Handle debug messages #
#########################
#
# -t|--topic {topic} : string grouping topic
# -l|--level [{level}] : optional specific verbosity level 1-10
#       verbosity level (off the top of my head):
#        1 : critical - EXECUTION WILL STOP
#        2 : Serious error in abstraction
#        3 : error (will print without debug turned on)
#        4 : Important implementation notification/failure
#        5 : Standard implementation information (standard log message)
#        6 : Extra implementation information, like success messages
#        7 : superfluous info (running hooks)
#        8 : Top detail, that is safe to echo
#        9 : tiny detail, output may actually break the implementation!
#

# path to the log file
path_log="${path_log:-"${path_projectconf}/log"}"

#set an execution threshold.  Anything -le will stop execution flow.
debug_critical_level=${_debug_critical_level:-1}
# DEBUG : output debugging text
debug=${debug:-3}
# DEBUG : Logging level
log=${log:-0}

# Set the debugging level
debug_set_level()
{
  if [ -z "${original_debug}" ]; then
    original_debug=${debug}
  fi
  debug=${1}
  shift
  debug --level 3 --topic "UTILITY->DEBUG" "Debug mode enabled/set (level:${debug}) $@"
}
# reset debug level to
debug_reset_level()
{
  if [ -n "${original_debug}" ]; then
    debug=${original_debug}
    debug --level 3 --topic "UTILITY->DEBUG" "Debug mode reset (level:${debug}) $@"
  fi
}
# set the debug logging value
debug_set_log()
{
  log=${1}
  shift
  debug --level 3 --topic "UTILITY->DEBUG" "Logging mode enabled/set (level:${log}) $@"
}
# disable the "execution stop on critical" feature in debug()
debug_disable_critical()
{
  debug_critical_level=${1:--1}
  debug --level 3 --topic "UTILITY->DEBUG" "Forced mode enabled $@"
}

# handle user interface messages
message()
{
  while [ $# -gt 0 ]
  do
    case "$1" in
      -s|--separator)
        echo "==============================================================================================="
        return 0
        ;;
      *)
        break;
    esac
    shift
  done


  echo $@
}
# Create a debug entry/message
debug()
{
  # 0= not critical, 1= critical - execution will stop
  local critical=0

  # default organization config
  local level=5
  local topic="GENERAL"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -l|--level)
        level=${2}
        shift
        ;;
      -t|--topic)
        topic="${2}:"
        shift
        ;;
      *)
        break;
    esac
    shift
  done

  if [ ${level} -le ${debug_critical_level} ]; then
    critical=1
  fi

  if [ ${level} -le ${debug} ]; then
    echo "[${level}]${topic} $@"
    if [ ${critical} -gt 0 ]; then
      echo "STOPPING EXECUTION DUE TO CRITICAL NOTICE"
    fi
  fi
  if [ ${level} -le ${log} ]; then
    echo "${executionid} ${date} : [${level}]${topic} $@" >> ${path_log}
    if [ ${critical} -gt 0 ]; then
      echo "STOPPING EXECUTION DUE TO CRITICAL NOTICE" >> ${path_log}
    fi
  fi

  if [ ${critical} -gt 0 ]; then
    exit 1
  fi
}

# run some initial debug statements depending on debug state
#
# We do some testing on the debug state, purely so that we can
# make some initial debugging output.  We do it here, as it is
# the earliest that we can,
#
if [ $debug -gt 3 ]; then
  debug_set_level $debug
fi
if [ $log -gt 0 ]; then
  debug_set_log $log
fi
if [ $debug_critical_level -lt 1 ]; then
  debug_disable_critical
fi

###
# source/include scripts
#
# an abstract function to include as a source, a script
# plus a few specific implementations that use the abstract
# function
#

# try to shorten paths by replacing library paths
# @DEPENDS on libraries
path_shorten()
{
  local path="${1}"

  local library=""
  for library in `libraries_list`; do
    case "${path}" in
      *"${library##*:}"*)
        echo "${library%:*}~${path#${library##*:}/}"
        return 0
        ;;
    esac
  done

  case "${path}" in
    *"${path_library}"*)
      echo "library~${path#${path_library}/}"
      return 0
      ;;
    *"${path_project}"*)
      echo "root~${path#${path_project}/}"
      return 0
      ;;
    *"${path_userhome}"*)
      echo "user~${path#${path_userhome}/}"
      return 0
      ;;
  esac

  echo "${path}"
  return 0
}
# reverse the path_shorten process
# @DEPENDS on libraries
path_expand()
{
  local path=${1};

  if [ "${path}" != "${path#*~}" ]; then

    case "${path}" in
      "root~"*)
        echo "${path_project}/${path#root~}"
        return 0
        ;;
      "library~"*)
        echo "${path_library}/${path#library~}"
        return 0
        ;;
      "user~"*)
        echo "${path_userhome}/${path#user~}"
        return 0
        ;;
      *)
        if function_exists "libraries_list"; then
          local library=""
          for library in `libraries_list`; do
            case "${path}" in
              *"${library%:*}~"*)
                #This can cause problems if debugging is enabled: library_include "${library%:*}"
                echo "${library##*:}/${path#${library%:*}~}"
                return 0
                ;;
            esac
          done
        fi
        ;;
    esac

    echo "${path}"
    return 1

  else

    echo "${path}"
    return 0

  fi
}
# return boolean on if a path exists
path_is()
{
  local type="any"
  local corefile=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      -b|--build)
        type="build"
        ;;
      -d|--dir|--directory)
        type="dir"
        ;;
      -f|--file)
        type="file"
        ;;
      -l|--lib|--library)
        type="library"
        ;;
      -x|--exec|--executable)
        type="exec"
        ;;
      -t|--type)
        type="${2}"
        shift
        ;;
      *)
        break;
    esac
    shift
  done

  local path="`path_expand \"${1}\"`"
  shift

  debug --level 9 --topic "UTILITIES->PATH->IS" "Path check [type:${type}][path:${path}]"
  case "${type}" in
    "build")
      if [ -d "${path}" ] && [ -f "${path}/Dockerfile" ]; then
        return 0
      fi
      ;;
    "file")
      if [ -f "${path}" ]; then
        return 0
      fi
      ;;
    "dir")
      if [ -d "${path}" ]; then
        return 0
      else
        return 1
      fi
      ;;
    "exec")
      if [ -f "${path}" ] && [ -x "${path}" ]; then
        return 0
      fi
      ;;
    "library")
      #interesting case, either an exec file, or a folder with an exec files of the same name
      if [ -f "${path}" ] && [ -x "${path}" ]; then
        return 0
      fi
      if [ -d "${path}" ]; then
        path="`library_handler "library:${path}"`"
        if [ -f "${path}" ] && [ -x "${path}" ]; then
          return 0
        fi
      fi
      ;;
    *)
      if [ -e "${path}" ]; then
        return 0
      fi
      ;;
  esac

  return 1
}
# include a source file at a given path
# @NOTE path must be a file, and mist be executable
path_include()
{
  local path="`path_expand \"$1\"`"
  shift

  if path_is --exec "${path}"; then
    source "${path}" --source-include-path "${path%/*}/" $@
    local success=$?
    debug --level 8 --topic "UTILITY->PATH->INCLUDE" "Including source item [path:${path}][success:${success}]"
    return $success
  else
    debug --level 6 --topic "UTILITY->PATH->INCLUDE" "Could not include source item.  Item was not found, or is not a file [path:${path}]"
    return 1
  fi
}
# List contents of a path
path_contents()
{
  local type="any"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -d|--directory)
        type="dir"
        ;;
      -f|--file)
        type="file"
        ;;
      -l|--library)
        type="library"
        ;;
      -x|--executable)
        type="exec"
        ;;
      -t|--type)
        type="${2}"
        shift
        ;;
      *)
        break;
    esac
    shift
  done

  local path="`path_expand \"${1}\"`"
  shift
  local path_item=""
  for path_item in ${path}/*; do
    if path_is --type "${type}" "${path_item}"; then
      echo "${path_item}"
    fi
  done
}
# make sure that a path exists
path_ensure()
{
  local path=""
  local type="dir"

  while [ $# -gt 0 ]
  do
    case "$1" in
      -d|--dir|--directory)
        type="dir"
        ;;
      -e|--exec)
        type="exec"
        ;;
      -f|--file)
        type="file"
        ;;
      -t|--type)
        type="${2}"
        shift
        ;;
      *)
        break;
    esac
    shift
  done

  local path="`path_expand \"${1}\"`"
  shift

  # Some sanity checks
  if [ -z "$path" ] || [ "${path}" == "not found" ]; then
    return 1
  fi

  case "${type}" in
    "file"|"exec")
      if [ -e "$path" ]; then
        if [ -d "$path" ]; then
          debug --level 6 --topic "UTILITY->PATH->ENSURE" "could not create file.  Already exists but as a directory [type:${type}][path:$path]"
          return 1
        else

          if [ "${type}" == "exec" ]; then
            if [ ! -x "${path}" ]; then
              chmod u+x "${path}"
              debug --level 8 --topic "UTILITY->PATH->ENSURE" "file already exists, but was not executable; no need to create it, but marked it executable [type:${type}][path:$path]"
            fi
          else
            debug --level 8 --topic "UTILITY->PATH->ENSURE" "file already exists, no need to create it [type:${type}][path:$path]"
          fi
          return 0
        fi
      else
        debug --level 8 --topic "UTILITY->PATH->ENSURE" "creating missing file [type:${type}][path:$path]"
        touch "${path}"
        local success=$?
        if [ $success -gt 0 ]; then
          debug --level 6 --topic "UTILITY->PATH->ENSURE" "could not create file [type:${type}][path:$path]"
        fi

        if [ "${type}" == "exec" ]; then
          debug --level 6 --topic "UTILITY->PATH->ENSURE" "making file executable [type:${type}][path:$path]"
          chmod u+x "${path}"
        fi
        return $success
      fi
      ;;
    "dir")
      if [ -e "${path}" ]; then
        if [ -f "${path}" ]; then
          debug --level 6 --topic "UTILITY->PATH->ENSURE" "could not create folder.  Already exists but not as a directory [type:${type}][path:$path]"
          return 1
        else
          debug --level 8 --topic "UTILITY->PATH->ENSURE" "folder already exists. No need to create it [type:${type}][path:$path]"
          return 0
        fi
      else
        debug --level 8 --topic "UTILITY->PATH->ENSURE" "creating missing folder [type:${type}][path:$path]"
        mkdir -p "${path}"
        local success=$?
        if [ $success -gt 0 ]; then
          debug --level 6 --topic "UTILITY->PATH->ENSURE" "could not create folder [type:${type}][path:$path]"
        fi
        return $success
      fi
      ;;
  esac
}

# test if a function exists
function_exists()
{
  declare -f -F "${1}" > /dev/null
  return $?
}
